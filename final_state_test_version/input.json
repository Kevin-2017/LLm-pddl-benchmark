{
    "prompt": "We are solving problems in PDDL format. Based on the PDDL domain, what will be the states after each action? Directly generate your answer without any explanation and in txt format like this: \n(empty shot4)\n(handempty left)\n(handempty right)",
    "pddl_domain": [
        "(define (domain barman)",
        "  (:requirements :strips :typing :action-costs)",
        "  (:types hand level beverage dispenser container - object",
        "        ingredient cocktail - beverage",
        "          shot shaker - container)",
        "  (:predicates  (ontable ?c - container)",
        "                (holding ?h - hand ?c - container)",
        "        (handempty ?h - hand)",
        "        (empty ?c - container)",
        "                (contains ?c - container ?b - beverage)",
        "        (clean ?c - container)",
        "                (used ?c - container ?b - beverage)",
        "                (dispenses ?d - dispenser ?i - ingredient)",
        "        (shaker-empty-level ?s - shaker ?l - level)",
        "        (shaker-level ?s - shaker ?l - level)",
        "        (next ?l1 ?l2 - level)",
        "        (unshaked ?s - shaker)",
        "        (shaked ?s - shaker)",
        "                (cocktail-part1 ?c - cocktail ?i - ingredient)",
        "                (cocktail-part2 ?c - cocktail ?i - ingredient))",
        "",
        "(:functions (total-cost) - number)",
        "        ",
        "  (:action grasp",
        "             :parameters (?h - hand ?c - container)",
        "             :precondition (and (ontable ?c) (handempty ?h))",
        "             :effect (and (not (ontable ?c))",
        "                        (not (handempty ?h))",
        "              (holding ?h ?c)",
        "              (increase (total-cost) 1)))",
        "",
        "  (:action leave",
        "             :parameters (?h - hand ?c - container)",
        "             :precondition (holding ?h ?c)",
        "             :effect (and (not (holding ?h ?c))",
        "                        (handempty ?h)",
        "              (ontable ?c)",
        "              (increase (total-cost) 1)))",
        "  ",
        "  (:action fill-shot",
        "           :parameters (?s - shot ?i - ingredient ?h1 ?h2 - hand ?d - dispenser)",
        "           :precondition (and (holding ?h1 ?s)",
        "                              (handempty ?h2)",
        "                     (dispenses ?d ?i)",
        "                              (empty ?s)",
        "                  (clean ?s))",
        "           :effect (and (not (empty ?s))",
        "                  (contains ?s ?i)",
        "                  (not (clean ?s))",
        "            (used ?s ?i)",
        "            (increase (total-cost) 10)))",
        "",
        "",
        "  (:action refill-shot",
        "           :parameters (?s - shot ?i - ingredient ?h1 ?h2 - hand ?d - dispenser)",
        "           :precondition (and (holding ?h1 ?s)                     ",
        "                              (handempty ?h2)",
        "                     (dispenses ?d ?i)",
        "                              (empty ?s)",
        "                  (used ?s ?i))",
        "           :effect (and (not (empty ?s))",
        "                        (contains ?s ?i)",
        "            (increase (total-cost) 10)))",
        "",
        "  (:action empty-shot",
        "           :parameters (?h - hand ?p - shot ?b - beverage)",
        "           :precondition (and (holding ?h ?p)",
        "                              (contains ?p ?b))",
        "           :effect (and (not (contains ?p ?b))",
        "                  (empty ?p)",
        "            (increase (total-cost) 1)))",
        "",
        "  (:action clean-shot",
        "         :parameters (?s - shot ?b - beverage ?h1 ?h2 - hand)",
        "           :precondition (and (holding ?h1 ?s)",
        "                              (handempty ?h2)                     ",
        "                  (empty ?s)",
        "                              (used ?s ?b))",
        "           :effect (and (not (used ?s ?b))",
        "                  (clean ?s)",
        "            (increase (total-cost) 1)))",
        "",
        "  (:action pour-shot-to-clean-shaker",
        "           :parameters (?s - shot ?i - ingredient ?d - shaker ?h1 - hand ?l ?l1 - level)",
        "           :precondition (and (holding ?h1 ?s)",
        "                  (contains ?s ?i)",
        "                              (empty ?d)",
        "                     (clean ?d)                              ",
        "                              (shaker-level ?d ?l)",
        "                              (next ?l ?l1))",
        "           :effect (and (not (contains ?s ?i))",
        "                  (empty ?s)",
        "            (contains ?d ?i)",
        "                        (not (empty ?d))",
        "            (not (clean ?d))",
        "            (unshaked ?d)",
        "            (not (shaker-level ?d ?l))",
        "            (shaker-level ?d ?l1)",
        "            (increase (total-cost) 1)))",
        "",
        "",
        "  (:action pour-shot-to-used-shaker",
        "           :parameters (?s - shot ?i - ingredient ?d - shaker ?h1 - hand ?l ?l1 - level)",
        "           :precondition (and (holding ?h1 ?s)",
        "                  (contains ?s ?i)",
        "                              (unshaked ?d)",
        "                              (shaker-level ?d ?l)",
        "                              (next ?l ?l1))",
        "           :effect (and (not (contains ?s ?i))",
        "                        (contains ?d ?i)",
        "                  (empty ?s)     ",
        "              (not (shaker-level ?d ?l))",
        "            (shaker-level ?d ?l1)",
        "            (increase (total-cost) 1)))",
        "",
        "  (:action empty-shaker",
        "           :parameters (?h - hand ?s - shaker ?b - cocktail ?l ?l1 - level)",
        "           :precondition (and (holding ?h ?s)",
        "                              (contains ?s ?b)",
        "                  (shaked ?s)",
        "                  (shaker-level ?s ?l)",
        "                  (shaker-empty-level ?s ?l1))",
        "           :effect (and (not (shaked ?s))",
        "                  (not (shaker-level ?s ?l))",
        "                  (shaker-level ?s ?l1)",
        "            (not (contains ?s ?b))",
        "                  (empty ?s)",
        "            (increase (total-cost) 1)))",
        "",
        "  (:action clean-shaker",
        "         :parameters (?h1 ?h2 - hand ?s - shaker)",
        "           :precondition (and (holding ?h1 ?s)",
        "                              (handempty ?h2)",
        "                              (empty ?s))",
        "           :effect (and (clean ?s)",
        "            (increase (total-cost) 1)))",
        "  ",
        "  (:action shake",
        "         :parameters (?b - cocktail ?d1 ?d2 - ingredient ?s - shaker ?h1 ?h2 - hand)",
        "           :precondition (and (holding ?h1 ?s)",
        "                              (handempty ?h2)",
        "                  (contains ?s ?d1)",
        "                              (contains ?s ?d2)",
        "                              (cocktail-part1 ?b ?d1)",
        "                  (cocktail-part2 ?b ?d2)",
        "                  (unshaked ?s))                  ",
        "           :effect (and (not (unshaked ?s))",
        "                (not (contains ?s ?d1))",
        "                        (not (contains ?s ?d2))",
        "                  (shaked ?s)",
        "                        (contains ?s ?b)",
        "            (increase (total-cost) 1)))",
        "",
        "  (:action pour-shaker-to-shot",
        "           :parameters (?b - beverage ?d - shot ?h - hand ?s - shaker ?l ?l1 - level)",
        "           :precondition (and (holding ?h ?s)",
        "                  (shaked ?s)",
        "                  (empty ?d)",
        "                  (clean ?d)",
        "                  (contains ?s ?b)",
        "                              (shaker-level ?s ?l)",
        "                              (next ?l1 ?l))",
        "           :effect (and (not (clean ?d))",
        "                  (not (empty ?d))",
        "            (contains ?d ?b)",
        "            (shaker-level ?s ?l1)",
        "            (not (shaker-level ?s ?l))",
        "            (increase (total-cost) 1)))",
        " )"
    ],
    "initial_state": {
        "predicates": [
            "(= (total-cost) 0)",
            "(ontable shaker1)",
            "(ontable shot1)",
            "(ontable shot2)",
            "(ontable shot3)",
            "(ontable shot4)",
            "(dispenses dispenser1 ingredient1)",
            "(dispenses dispenser2 ingredient2)",
            "(dispenses dispenser3 ingredient3)",
            "(clean shaker1)",
            "(clean shot1)",
            "(clean shot2)",
            "(clean shot3)",
            "(clean shot4)",
            "(empty shaker1)",
            "(empty shot1)",
            "(empty shot2)",
            "(empty shot3)",
            "(empty shot4)",
            "(handempty left)",
            "(handempty right)",
            "(shaker-empty-level shaker1 l0)",
            "(shaker-level shaker1 l0)",
            "(next l0 l1)",
            "(next l1 l2)",
            "(cocktail-part1 cocktail1 ingredient3)",
            "(cocktail-part2 cocktail1 ingredient1)",
            "(cocktail-part1 cocktail2 ingredient2)",
            "(cocktail-part2 cocktail2 ingredient3)",
            "(cocktail-part1 cocktail3 ingredient1)",
            "(cocktail-part2 cocktail3 ingredient2)"
        ]
    },
    "action_sequence": [
        "(grasp left shaker1)",
        "(grasp right shot4)"
    ],
    "states_after_actions": [
        "line 1:9 mismatched input 'problem' expecting 'domain'\n\nFinal State after all actions:\nStep 2:\n  clean(shaker1)\n  clean(shot1)\n  clean(shot2)\n  clean(shot3)\n  clean(shot4)\n  cocktail-part1(cocktail1, ingredient3)\n  cocktail-part1(cocktail2, ingredient2)\n  cocktail-part1(cocktail3, ingredient1)\n  cocktail-part2(cocktail1, ingredient1)\n  cocktail-part2(cocktail2, ingredient3)\n  cocktail-part2(cocktail3, ingredient2)\n  dispenses(dispenser1, ingredient1)\n  dispenses(dispenser2, ingredient2)\n  dispenses(dispenser3, ingredient3)\n  empty(shaker1)\n  empty(shot1)\n  empty(shot2)\n  empty(shot3)\n  empty(shot4)\n  holding(left, shaker1)\n  holding(right, shot4)\n  next(l0, l1)\n  next(l1, l2)\n  ontable(shot1)\n  ontable(shot2)\n  ontable(shot3)\n  shaker-empty-level(shaker1, l0)\n  shaker-level(shaker1, l0)"
    ]
}