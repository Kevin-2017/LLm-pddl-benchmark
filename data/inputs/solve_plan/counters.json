{
  "domain": "counters",
  "domain_file": "data/pddl/counters/domain.pddl",
  "prompts": [
    {
      "instance": "p01.pddl",
      "instance_path": "data/pddl/counters/instances/p01.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) 1) (max_int)))\n         :effect (and (increase (value ?c) 1))\n    )\n\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (value ?c) 1))\n         :effect (and (decrease (value ?c) 1))\n    )\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_4)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 - counter\n  )\n\n  (:init\n    (= (max_int) 8)\n\t(= (value c0) 6)\n\t(= (value c1) 4)\n\t(= (value c2) 2)\n\t(= (value c3) 0)\n  )\n\n  (:goal (and \n(<= (+ (value c0) 1) (value c1))\n(<= (+ (value c1) 1) (value c2))\n(<= (+ (value c2) 1) (value c3))\n  ))\n\n  \n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p02.pddl",
      "instance_path": "data/pddl/counters/instances/p02.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) 1) (max_int)))\n         :effect (and (increase (value ?c) 1))\n    )\n\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (value ?c) 1))\n         :effect (and (decrease (value ?c) 1))\n    )\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_4_1)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 - counter\n  )\n\n  (:init\n    (= (max_int) 8)\n\t(= (value c0) 1)\n\t(= (value c1) 3)\n\t(= (value c2) 7)\n\t(= (value c3) 1)\n  )\n\n  (:goal (and \n(<= (+ (value c0) 1) (value c1))\n(<= (+ (value c1) 1) (value c2))\n(<= (+ (value c2) 1) (value c3))\n  ))\n\n  \n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p03.pddl",
      "instance_path": "data/pddl/counters/instances/p03.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) 1) (max_int)))\n         :effect (and (increase (value ?c) 1))\n    )\n\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (value ?c) 1))\n         :effect (and (decrease (value ?c) 1))\n    )\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_4)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 - counter\n  )\n\n  (:init\n    (= (max_int) 8)\n\t(= (value c0) 0)\n\t(= (value c1) 0)\n\t(= (value c2) 0)\n\t(= (value c3) 0)\n  )\n\n  (:goal (and \n    (<= (+ (value c0) 1) (value c1))\n\t(<= (+ (value c1) 1) (value c2))\n\t(<= (+ (value c2) 1) (value c3))\n  ))\n\n  \n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p04.pddl",
      "instance_path": "data/pddl/counters/instances/p04.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) 1) (max_int)))\n         :effect (and (increase (value ?c) 1))\n    )\n\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (value ?c) 1))\n         :effect (and (decrease (value ?c) 1))\n    )\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_8_3)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 - counter\n  )\n\n  (:init\n    (= (max_int) 16)\n\t(= (value c0) 3)\n\t(= (value c1) 13)\n\t(= (value c2) 0)\n\t(= (value c3) 13)\n\t(= (value c4) 7)\n\t(= (value c5) 10)\n\t(= (value c6) 8)\n\t(= (value c7) 5)\n  )\n\n  (:goal (and \n(<= (+ (value c0) 1) (value c1))\n(<= (+ (value c1) 1) (value c2))\n(<= (+ (value c2) 1) (value c3))\n(<= (+ (value c3) 1) (value c4))\n(<= (+ (value c4) 1) (value c5))\n(<= (+ (value c5) 1) (value c6))\n(<= (+ (value c6) 1) (value c7))\n  ))\n\n  \n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p05.pddl",
      "instance_path": "data/pddl/counters/instances/p05.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) 1) (max_int)))\n         :effect (and (increase (value ?c) 1))\n    )\n\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (value ?c) 1))\n         :effect (and (decrease (value ?c) 1))\n    )\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_8_2)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 - counter\n  )\n\n  (:init\n    (= (max_int) 16)\n\t(= (value c0) 5)\n\t(= (value c1) 7)\n\t(= (value c2) 0)\n\t(= (value c3) 15)\n\t(= (value c4) 4)\n\t(= (value c5) 14)\n\t(= (value c6) 10)\n\t(= (value c7) 1)\n  )\n\n  (:goal (and \n(<= (+ (value c0) 1) (value c1))\n(<= (+ (value c1) 1) (value c2))\n(<= (+ (value c2) 1) (value c3))\n(<= (+ (value c3) 1) (value c4))\n(<= (+ (value c4) 1) (value c5))\n(<= (+ (value c5) 1) (value c6))\n(<= (+ (value c6) 1) (value c7))\n  ))\n\n  \n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p06.pddl",
      "instance_path": "data/pddl/counters/instances/p06.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) 1) (max_int)))\n         :effect (and (increase (value ?c) 1))\n    )\n\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (value ?c) 1))\n         :effect (and (decrease (value ?c) 1))\n    )\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_12)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 - counter\n  )\n\n  (:init\n    (= (max_int) 24)\n\t(= (value c0) 22)\n\t(= (value c1) 20)\n\t(= (value c2) 18)\n\t(= (value c3) 16)\n\t(= (value c4) 14)\n\t(= (value c5) 12)\n\t(= (value c6) 10)\n\t(= (value c7) 8)\n\t(= (value c8) 6)\n\t(= (value c9) 4)\n\t(= (value c10) 2)\n\t(= (value c11) 0)\n  )\n\n  (:goal (and \n(<= (+ (value c0) 1) (value c1))\n(<= (+ (value c1) 1) (value c2))\n(<= (+ (value c2) 1) (value c3))\n(<= (+ (value c3) 1) (value c4))\n(<= (+ (value c4) 1) (value c5))\n(<= (+ (value c5) 1) (value c6))\n(<= (+ (value c6) 1) (value c7))\n(<= (+ (value c7) 1) (value c8))\n(<= (+ (value c8) 1) (value c9))\n(<= (+ (value c9) 1) (value c10))\n(<= (+ (value c10) 1) (value c11))\n  ))\n\n  \n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p07.pddl",
      "instance_path": "data/pddl/counters/instances/p07.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) 1) (max_int)))\n         :effect (and (increase (value ?c) 1))\n    )\n\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (value ?c) 1))\n         :effect (and (decrease (value ?c) 1))\n    )\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_12_3)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 - counter\n  )\n\n  (:init\n    (= (max_int) 24)\n\t(= (value c0) 15)\n\t(= (value c1) 16)\n\t(= (value c2) 1)\n\t(= (value c3) 0)\n\t(= (value c4) 17)\n\t(= (value c5) 19)\n\t(= (value c6) 20)\n\t(= (value c7) 13)\n\t(= (value c8) 7)\n\t(= (value c9) 3)\n\t(= (value c10) 0)\n\t(= (value c11) 15)\n  )\n\n  (:goal (and \n(<= (+ (value c0) 1) (value c1))\n(<= (+ (value c1) 1) (value c2))\n(<= (+ (value c2) 1) (value c3))\n(<= (+ (value c3) 1) (value c4))\n(<= (+ (value c4) 1) (value c5))\n(<= (+ (value c5) 1) (value c6))\n(<= (+ (value c6) 1) (value c7))\n(<= (+ (value c7) 1) (value c8))\n(<= (+ (value c8) 1) (value c9))\n(<= (+ (value c9) 1) (value c10))\n(<= (+ (value c10) 1) (value c11))\n  ))\n\n  \n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p08.pddl",
      "instance_path": "data/pddl/counters/instances/p08.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) 1) (max_int)))\n         :effect (and (increase (value ?c) 1))\n    )\n\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (value ?c) 1))\n         :effect (and (decrease (value ?c) 1))\n    )\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_12)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 - counter\n  )\n\n  (:init\n    (= (max_int) 24)\n\t(= (value c0) 0)\n\t(= (value c1) 0)\n\t(= (value c2) 0)\n\t(= (value c3) 0)\n\t(= (value c4) 0)\n\t(= (value c5) 0)\n\t(= (value c6) 0)\n\t(= (value c7) 0)\n\t(= (value c8) 0)\n\t(= (value c9) 0)\n\t(= (value c10) 0)\n\t(= (value c11) 0)\n  )\n\n  (:goal (and \n    (<= (+ (value c0) 1) (value c1))\n\t(<= (+ (value c1) 1) (value c2))\n\t(<= (+ (value c2) 1) (value c3))\n\t(<= (+ (value c3) 1) (value c4))\n\t(<= (+ (value c4) 1) (value c5))\n\t(<= (+ (value c5) 1) (value c6))\n\t(<= (+ (value c6) 1) (value c7))\n\t(<= (+ (value c7) 1) (value c8))\n\t(<= (+ (value c8) 1) (value c9))\n\t(<= (+ (value c9) 1) (value c10))\n\t(<= (+ (value c10) 1) (value c11))\n  ))\n\n  \n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p09.pddl",
      "instance_path": "data/pddl/counters/instances/p09.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) 1) (max_int)))\n         :effect (and (increase (value ?c) 1))\n    )\n\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (value ?c) 1))\n         :effect (and (decrease (value ?c) 1))\n    )\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_16)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 - counter\n  )\n\n  (:init\n    (= (max_int) 32)\n\t(= (value c0) 30)\n\t(= (value c1) 28)\n\t(= (value c2) 26)\n\t(= (value c3) 24)\n\t(= (value c4) 22)\n\t(= (value c5) 20)\n\t(= (value c6) 18)\n\t(= (value c7) 16)\n\t(= (value c8) 14)\n\t(= (value c9) 12)\n\t(= (value c10) 10)\n\t(= (value c11) 8)\n\t(= (value c12) 6)\n\t(= (value c13) 4)\n\t(= (value c14) 2)\n\t(= (value c15) 0)\n  )\n\n  (:goal (and \n(<= (+ (value c0) 1) (value c1))\n(<= (+ (value c1) 1) (value c2))\n(<= (+ (value c2) 1) (value c3))\n(<= (+ (value c3) 1) (value c4))\n(<= (+ (value c4) 1) (value c5))\n(<= (+ (value c5) 1) (value c6))\n(<= (+ (value c6) 1) (value c7))\n(<= (+ (value c7) 1) (value c8))\n(<= (+ (value c8) 1) (value c9))\n(<= (+ (value c9) 1) (value c10))\n(<= (+ (value c10) 1) (value c11))\n(<= (+ (value c11) 1) (value c12))\n(<= (+ (value c12) 1) (value c13))\n(<= (+ (value c13) 1) (value c14))\n(<= (+ (value c14) 1) (value c15))\n  ))\n\n  \n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p10.pddl",
      "instance_path": "data/pddl/counters/instances/p10.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) 1) (max_int)))\n         :effect (and (increase (value ?c) 1))\n    )\n\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (value ?c) 1))\n         :effect (and (decrease (value ?c) 1))\n    )\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_20_1)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 - counter\n  )\n\n  (:init\n    (= (max_int) 40)\n\t(= (value c0) 38)\n\t(= (value c1) 26)\n\t(= (value c2) 28)\n\t(= (value c3) 33)\n\t(= (value c4) 24)\n\t(= (value c5) 5)\n\t(= (value c6) 5)\n\t(= (value c7) 32)\n\t(= (value c8) 21)\n\t(= (value c9) 25)\n\t(= (value c10) 29)\n\t(= (value c11) 23)\n\t(= (value c12) 27)\n\t(= (value c13) 7)\n\t(= (value c14) 1)\n\t(= (value c15) 39)\n\t(= (value c16) 19)\n\t(= (value c17) 15)\n\t(= (value c18) 24)\n\t(= (value c19) 32)\n  )\n\n  (:goal (and \n(<= (+ (value c0) 1) (value c1))\n(<= (+ (value c1) 1) (value c2))\n(<= (+ (value c2) 1) (value c3))\n(<= (+ (value c3) 1) (value c4))\n(<= (+ (value c4) 1) (value c5))\n(<= (+ (value c5) 1) (value c6))\n(<= (+ (value c6) 1) (value c7))\n(<= (+ (value c7) 1) (value c8))\n(<= (+ (value c8) 1) (value c9))\n(<= (+ (value c9) 1) (value c10))\n(<= (+ (value c10) 1) (value c11))\n(<= (+ (value c11) 1) (value c12))\n(<= (+ (value c12) 1) (value c13))\n(<= (+ (value c13) 1) (value c14))\n(<= (+ (value c14) 1) (value c15))\n(<= (+ (value c15) 1) (value c16))\n(<= (+ (value c16) 1) (value c17))\n(<= (+ (value c17) 1) (value c18))\n(<= (+ (value c18) 1) (value c19))\n  ))\n\n  \n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p11.pddl",
      "instance_path": "data/pddl/counters/instances/p11.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) 1) (max_int)))\n         :effect (and (increase (value ?c) 1))\n    )\n\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (value ?c) 1))\n         :effect (and (decrease (value ?c) 1))\n    )\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_24_1)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c20 c21 c22 c23 - counter\n  )\n\n  (:init\n    (= (max_int) 48)\n\t(= (value c0) 19)\n\t(= (value c1) 17)\n\t(= (value c2) 41)\n\t(= (value c3) 6)\n\t(= (value c4) 8)\n\t(= (value c5) 29)\n\t(= (value c6) 34)\n\t(= (value c7) 14)\n\t(= (value c8) 32)\n\t(= (value c9) 43)\n\t(= (value c10) 36)\n\t(= (value c11) 20)\n\t(= (value c12) 9)\n\t(= (value c13) 26)\n\t(= (value c14) 10)\n\t(= (value c15) 23)\n\t(= (value c16) 0)\n\t(= (value c17) 17)\n\t(= (value c18) 21)\n\t(= (value c19) 28)\n\t(= (value c20) 27)\n\t(= (value c21) 30)\n\t(= (value c22) 14)\n\t(= (value c23) 15)\n  )\n\n  (:goal (and \n(<= (+ (value c0) 1) (value c1))\n(<= (+ (value c1) 1) (value c2))\n(<= (+ (value c2) 1) (value c3))\n(<= (+ (value c3) 1) (value c4))\n(<= (+ (value c4) 1) (value c5))\n(<= (+ (value c5) 1) (value c6))\n(<= (+ (value c6) 1) (value c7))\n(<= (+ (value c7) 1) (value c8))\n(<= (+ (value c8) 1) (value c9))\n(<= (+ (value c9) 1) (value c10))\n(<= (+ (value c10) 1) (value c11))\n(<= (+ (value c11) 1) (value c12))\n(<= (+ (value c12) 1) (value c13))\n(<= (+ (value c13) 1) (value c14))\n(<= (+ (value c14) 1) (value c15))\n(<= (+ (value c15) 1) (value c16))\n(<= (+ (value c16) 1) (value c17))\n(<= (+ (value c17) 1) (value c18))\n(<= (+ (value c18) 1) (value c19))\n(<= (+ (value c19) 1) (value c20))\n(<= (+ (value c20) 1) (value c21))\n(<= (+ (value c21) 1) (value c22))\n(<= (+ (value c22) 1) (value c23))\n  ))\n\n  \n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p12.pddl",
      "instance_path": "data/pddl/counters/instances/p12.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) 1) (max_int)))\n         :effect (and (increase (value ?c) 1))\n    )\n\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (value ?c) 1))\n         :effect (and (decrease (value ?c) 1))\n    )\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_28_1)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c20 c21 c22 c23 c24 c25 c26 c27 - counter\n  )\n\n  (:init\n    (= (max_int) 56)\n\t(= (value c0) 52)\n\t(= (value c1) 18)\n\t(= (value c2) 20)\n\t(= (value c3) 34)\n\t(= (value c4) 50)\n\t(= (value c5) 50)\n\t(= (value c6) 34)\n\t(= (value c7) 20)\n\t(= (value c8) 16)\n\t(= (value c9) 13)\n\t(= (value c10) 1)\n\t(= (value c11) 4)\n\t(= (value c12) 10)\n\t(= (value c13) 18)\n\t(= (value c14) 14)\n\t(= (value c15) 40)\n\t(= (value c16) 11)\n\t(= (value c17) 26)\n\t(= (value c18) 41)\n\t(= (value c19) 20)\n\t(= (value c20) 29)\n\t(= (value c21) 37)\n\t(= (value c22) 27)\n\t(= (value c23) 31)\n\t(= (value c24) 33)\n\t(= (value c25) 13)\n\t(= (value c26) 31)\n\t(= (value c27) 16)\n  )\n\n  (:goal (and \n(<= (+ (value c0) 1) (value c1))\n(<= (+ (value c1) 1) (value c2))\n(<= (+ (value c2) 1) (value c3))\n(<= (+ (value c3) 1) (value c4))\n(<= (+ (value c4) 1) (value c5))\n(<= (+ (value c5) 1) (value c6))\n(<= (+ (value c6) 1) (value c7))\n(<= (+ (value c7) 1) (value c8))\n(<= (+ (value c8) 1) (value c9))\n(<= (+ (value c9) 1) (value c10))\n(<= (+ (value c10) 1) (value c11))\n(<= (+ (value c11) 1) (value c12))\n(<= (+ (value c12) 1) (value c13))\n(<= (+ (value c13) 1) (value c14))\n(<= (+ (value c14) 1) (value c15))\n(<= (+ (value c15) 1) (value c16))\n(<= (+ (value c16) 1) (value c17))\n(<= (+ (value c17) 1) (value c18))\n(<= (+ (value c18) 1) (value c19))\n(<= (+ (value c19) 1) (value c20))\n(<= (+ (value c20) 1) (value c21))\n(<= (+ (value c21) 1) (value c22))\n(<= (+ (value c22) 1) (value c23))\n(<= (+ (value c23) 1) (value c24))\n(<= (+ (value c24) 1) (value c25))\n(<= (+ (value c25) 1) (value c26))\n(<= (+ (value c26) 1) (value c27))\n  ))\n\n  \n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p13.pddl",
      "instance_path": "data/pddl/counters/instances/p13.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) 1) (max_int)))\n         :effect (and (increase (value ?c) 1))\n    )\n\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (value ?c) 1))\n         :effect (and (decrease (value ?c) 1))\n    )\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_32_2)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c20 c21 c22 c23 c24 c25 c26 c27 c28 c29 c30 c31 - counter\n  )\n\n  (:init\n    (= (max_int) 64)\n\t(= (value c0) 31)\n\t(= (value c1) 20)\n\t(= (value c2) 4)\n\t(= (value c3) 10)\n\t(= (value c4) 6)\n\t(= (value c5) 57)\n\t(= (value c6) 1)\n\t(= (value c7) 10)\n\t(= (value c8) 34)\n\t(= (value c9) 29)\n\t(= (value c10) 55)\n\t(= (value c11) 57)\n\t(= (value c12) 40)\n\t(= (value c13) 39)\n\t(= (value c14) 54)\n\t(= (value c15) 14)\n\t(= (value c16) 24)\n\t(= (value c17) 34)\n\t(= (value c18) 24)\n\t(= (value c19) 42)\n\t(= (value c20) 16)\n\t(= (value c21) 37)\n\t(= (value c22) 54)\n\t(= (value c23) 25)\n\t(= (value c24) 35)\n\t(= (value c25) 58)\n\t(= (value c26) 2)\n\t(= (value c27) 18)\n\t(= (value c28) 4)\n\t(= (value c29) 49)\n\t(= (value c30) 1)\n\t(= (value c31) 35)\n  )\n\n  (:goal (and \n(<= (+ (value c0) 1) (value c1))\n(<= (+ (value c1) 1) (value c2))\n(<= (+ (value c2) 1) (value c3))\n(<= (+ (value c3) 1) (value c4))\n(<= (+ (value c4) 1) (value c5))\n(<= (+ (value c5) 1) (value c6))\n(<= (+ (value c6) 1) (value c7))\n(<= (+ (value c7) 1) (value c8))\n(<= (+ (value c8) 1) (value c9))\n(<= (+ (value c9) 1) (value c10))\n(<= (+ (value c10) 1) (value c11))\n(<= (+ (value c11) 1) (value c12))\n(<= (+ (value c12) 1) (value c13))\n(<= (+ (value c13) 1) (value c14))\n(<= (+ (value c14) 1) (value c15))\n(<= (+ (value c15) 1) (value c16))\n(<= (+ (value c16) 1) (value c17))\n(<= (+ (value c17) 1) (value c18))\n(<= (+ (value c18) 1) (value c19))\n(<= (+ (value c19) 1) (value c20))\n(<= (+ (value c20) 1) (value c21))\n(<= (+ (value c21) 1) (value c22))\n(<= (+ (value c22) 1) (value c23))\n(<= (+ (value c23) 1) (value c24))\n(<= (+ (value c24) 1) (value c25))\n(<= (+ (value c25) 1) (value c26))\n(<= (+ (value c26) 1) (value c27))\n(<= (+ (value c27) 1) (value c28))\n(<= (+ (value c28) 1) (value c29))\n(<= (+ (value c29) 1) (value c30))\n(<= (+ (value c30) 1) (value c31))\n  ))\n\n  \n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p14.pddl",
      "instance_path": "data/pddl/counters/instances/p14.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) 1) (max_int)))\n         :effect (and (increase (value ?c) 1))\n    )\n\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (value ?c) 1))\n         :effect (and (decrease (value ?c) 1))\n    )\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_32_1)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c20 c21 c22 c23 c24 c25 c26 c27 c28 c29 c30 c31 - counter\n  )\n\n  (:init\n    (= (max_int) 64)\n\t(= (value c0) 26)\n\t(= (value c1) 7)\n\t(= (value c2) 55)\n\t(= (value c3) 26)\n\t(= (value c4) 34)\n\t(= (value c5) 34)\n\t(= (value c6) 49)\n\t(= (value c7) 59)\n\t(= (value c8) 18)\n\t(= (value c9) 36)\n\t(= (value c10) 44)\n\t(= (value c11) 33)\n\t(= (value c12) 54)\n\t(= (value c13) 33)\n\t(= (value c14) 27)\n\t(= (value c15) 2)\n\t(= (value c16) 29)\n\t(= (value c17) 29)\n\t(= (value c18) 8)\n\t(= (value c19) 22)\n\t(= (value c20) 16)\n\t(= (value c21) 45)\n\t(= (value c22) 23)\n\t(= (value c23) 31)\n\t(= (value c24) 0)\n\t(= (value c25) 8)\n\t(= (value c26) 54)\n\t(= (value c27) 56)\n\t(= (value c28) 23)\n\t(= (value c29) 10)\n\t(= (value c30) 31)\n\t(= (value c31) 3)\n  )\n\n  (:goal (and \n(<= (+ (value c0) 1) (value c1))\n(<= (+ (value c1) 1) (value c2))\n(<= (+ (value c2) 1) (value c3))\n(<= (+ (value c3) 1) (value c4))\n(<= (+ (value c4) 1) (value c5))\n(<= (+ (value c5) 1) (value c6))\n(<= (+ (value c6) 1) (value c7))\n(<= (+ (value c7) 1) (value c8))\n(<= (+ (value c8) 1) (value c9))\n(<= (+ (value c9) 1) (value c10))\n(<= (+ (value c10) 1) (value c11))\n(<= (+ (value c11) 1) (value c12))\n(<= (+ (value c12) 1) (value c13))\n(<= (+ (value c13) 1) (value c14))\n(<= (+ (value c14) 1) (value c15))\n(<= (+ (value c15) 1) (value c16))\n(<= (+ (value c16) 1) (value c17))\n(<= (+ (value c17) 1) (value c18))\n(<= (+ (value c18) 1) (value c19))\n(<= (+ (value c19) 1) (value c20))\n(<= (+ (value c20) 1) (value c21))\n(<= (+ (value c21) 1) (value c22))\n(<= (+ (value c22) 1) (value c23))\n(<= (+ (value c23) 1) (value c24))\n(<= (+ (value c24) 1) (value c25))\n(<= (+ (value c25) 1) (value c26))\n(<= (+ (value c26) 1) (value c27))\n(<= (+ (value c27) 1) (value c28))\n(<= (+ (value c28) 1) (value c29))\n(<= (+ (value c29) 1) (value c30))\n(<= (+ (value c30) 1) (value c31))\n  ))\n\n  \n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p15.pddl",
      "instance_path": "data/pddl/counters/instances/p15.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) 1) (max_int)))\n         :effect (and (increase (value ?c) 1))\n    )\n\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (value ?c) 1))\n         :effect (and (decrease (value ?c) 1))\n    )\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_36)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c20 c21 c22 c23 c24 c25 c26 c27 c28 c29 c30 c31 c32 c33 c34 c35 - counter\n  )\n\n  (:init\n    (= (max_int) 72)\n\t(= (value c0) 70)\n\t(= (value c1) 68)\n\t(= (value c2) 66)\n\t(= (value c3) 64)\n\t(= (value c4) 62)\n\t(= (value c5) 60)\n\t(= (value c6) 58)\n\t(= (value c7) 56)\n\t(= (value c8) 54)\n\t(= (value c9) 52)\n\t(= (value c10) 50)\n\t(= (value c11) 48)\n\t(= (value c12) 46)\n\t(= (value c13) 44)\n\t(= (value c14) 42)\n\t(= (value c15) 40)\n\t(= (value c16) 38)\n\t(= (value c17) 36)\n\t(= (value c18) 34)\n\t(= (value c19) 32)\n\t(= (value c20) 30)\n\t(= (value c21) 28)\n\t(= (value c22) 26)\n\t(= (value c23) 24)\n\t(= (value c24) 22)\n\t(= (value c25) 20)\n\t(= (value c26) 18)\n\t(= (value c27) 16)\n\t(= (value c28) 14)\n\t(= (value c29) 12)\n\t(= (value c30) 10)\n\t(= (value c31) 8)\n\t(= (value c32) 6)\n\t(= (value c33) 4)\n\t(= (value c34) 2)\n\t(= (value c35) 0)\n  )\n\n  (:goal (and \n(<= (+ (value c0) 1) (value c1))\n(<= (+ (value c1) 1) (value c2))\n(<= (+ (value c2) 1) (value c3))\n(<= (+ (value c3) 1) (value c4))\n(<= (+ (value c4) 1) (value c5))\n(<= (+ (value c5) 1) (value c6))\n(<= (+ (value c6) 1) (value c7))\n(<= (+ (value c7) 1) (value c8))\n(<= (+ (value c8) 1) (value c9))\n(<= (+ (value c9) 1) (value c10))\n(<= (+ (value c10) 1) (value c11))\n(<= (+ (value c11) 1) (value c12))\n(<= (+ (value c12) 1) (value c13))\n(<= (+ (value c13) 1) (value c14))\n(<= (+ (value c14) 1) (value c15))\n(<= (+ (value c15) 1) (value c16))\n(<= (+ (value c16) 1) (value c17))\n(<= (+ (value c17) 1) (value c18))\n(<= (+ (value c18) 1) (value c19))\n(<= (+ (value c19) 1) (value c20))\n(<= (+ (value c20) 1) (value c21))\n(<= (+ (value c21) 1) (value c22))\n(<= (+ (value c22) 1) (value c23))\n(<= (+ (value c23) 1) (value c24))\n(<= (+ (value c24) 1) (value c25))\n(<= (+ (value c25) 1) (value c26))\n(<= (+ (value c26) 1) (value c27))\n(<= (+ (value c27) 1) (value c28))\n(<= (+ (value c28) 1) (value c29))\n(<= (+ (value c29) 1) (value c30))\n(<= (+ (value c30) 1) (value c31))\n(<= (+ (value c31) 1) (value c32))\n(<= (+ (value c32) 1) (value c33))\n(<= (+ (value c33) 1) (value c34))\n(<= (+ (value c34) 1) (value c35))\n  ))\n\n  \n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p16.pddl",
      "instance_path": "data/pddl/counters/instances/p16.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) 1) (max_int)))\n         :effect (and (increase (value ?c) 1))\n    )\n\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (value ?c) 1))\n         :effect (and (decrease (value ?c) 1))\n    )\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_36_2)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c20 c21 c22 c23 c24 c25 c26 c27 c28 c29 c30 c31 c32 c33 c34 c35 - counter\n  )\n\n  (:init\n    (= (max_int) 72)\n\t(= (value c0) 68)\n\t(= (value c1) 2)\n\t(= (value c2) 7)\n\t(= (value c3) 50)\n\t(= (value c4) 45)\n\t(= (value c5) 7)\n\t(= (value c6) 21)\n\t(= (value c7) 30)\n\t(= (value c8) 39)\n\t(= (value c9) 43)\n\t(= (value c10) 49)\n\t(= (value c11) 23)\n\t(= (value c12) 23)\n\t(= (value c13) 11)\n\t(= (value c14) 26)\n\t(= (value c15) 27)\n\t(= (value c16) 29)\n\t(= (value c17) 62)\n\t(= (value c18) 31)\n\t(= (value c19) 50)\n\t(= (value c20) 38)\n\t(= (value c21) 9)\n\t(= (value c22) 23)\n\t(= (value c23) 1)\n\t(= (value c24) 56)\n\t(= (value c25) 47)\n\t(= (value c26) 53)\n\t(= (value c27) 32)\n\t(= (value c28) 56)\n\t(= (value c29) 34)\n\t(= (value c30) 9)\n\t(= (value c31) 52)\n\t(= (value c32) 7)\n\t(= (value c33) 67)\n\t(= (value c34) 39)\n\t(= (value c35) 67)\n  )\n\n  (:goal (and \n(<= (+ (value c0) 1) (value c1))\n(<= (+ (value c1) 1) (value c2))\n(<= (+ (value c2) 1) (value c3))\n(<= (+ (value c3) 1) (value c4))\n(<= (+ (value c4) 1) (value c5))\n(<= (+ (value c5) 1) (value c6))\n(<= (+ (value c6) 1) (value c7))\n(<= (+ (value c7) 1) (value c8))\n(<= (+ (value c8) 1) (value c9))\n(<= (+ (value c9) 1) (value c10))\n(<= (+ (value c10) 1) (value c11))\n(<= (+ (value c11) 1) (value c12))\n(<= (+ (value c12) 1) (value c13))\n(<= (+ (value c13) 1) (value c14))\n(<= (+ (value c14) 1) (value c15))\n(<= (+ (value c15) 1) (value c16))\n(<= (+ (value c16) 1) (value c17))\n(<= (+ (value c17) 1) (value c18))\n(<= (+ (value c18) 1) (value c19))\n(<= (+ (value c19) 1) (value c20))\n(<= (+ (value c20) 1) (value c21))\n(<= (+ (value c21) 1) (value c22))\n(<= (+ (value c22) 1) (value c23))\n(<= (+ (value c23) 1) (value c24))\n(<= (+ (value c24) 1) (value c25))\n(<= (+ (value c25) 1) (value c26))\n(<= (+ (value c26) 1) (value c27))\n(<= (+ (value c27) 1) (value c28))\n(<= (+ (value c28) 1) (value c29))\n(<= (+ (value c29) 1) (value c30))\n(<= (+ (value c30) 1) (value c31))\n(<= (+ (value c31) 1) (value c32))\n(<= (+ (value c32) 1) (value c33))\n(<= (+ (value c33) 1) (value c34))\n(<= (+ (value c34) 1) (value c35))\n  ))\n\n  \n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p17.pddl",
      "instance_path": "data/pddl/counters/instances/p17.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) 1) (max_int)))\n         :effect (and (increase (value ?c) 1))\n    )\n\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (value ?c) 1))\n         :effect (and (decrease (value ?c) 1))\n    )\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_40)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c20 c21 c22 c23 c24 c25 c26 c27 c28 c29 c30 c31 c32 c33 c34 c35 c36 c37 c38 c39 - counter\n  )\n\n  (:init\n    (= (max_int) 80)\n\t(= (value c0) 0)\n\t(= (value c1) 0)\n\t(= (value c2) 0)\n\t(= (value c3) 0)\n\t(= (value c4) 0)\n\t(= (value c5) 0)\n\t(= (value c6) 0)\n\t(= (value c7) 0)\n\t(= (value c8) 0)\n\t(= (value c9) 0)\n\t(= (value c10) 0)\n\t(= (value c11) 0)\n\t(= (value c12) 0)\n\t(= (value c13) 0)\n\t(= (value c14) 0)\n\t(= (value c15) 0)\n\t(= (value c16) 0)\n\t(= (value c17) 0)\n\t(= (value c18) 0)\n\t(= (value c19) 0)\n\t(= (value c20) 0)\n\t(= (value c21) 0)\n\t(= (value c22) 0)\n\t(= (value c23) 0)\n\t(= (value c24) 0)\n\t(= (value c25) 0)\n\t(= (value c26) 0)\n\t(= (value c27) 0)\n\t(= (value c28) 0)\n\t(= (value c29) 0)\n\t(= (value c30) 0)\n\t(= (value c31) 0)\n\t(= (value c32) 0)\n\t(= (value c33) 0)\n\t(= (value c34) 0)\n\t(= (value c35) 0)\n\t(= (value c36) 0)\n\t(= (value c37) 0)\n\t(= (value c38) 0)\n\t(= (value c39) 0)\n  )\n\n  (:goal (and \n(<= (+ (value c0) 1) (value c1))\n(<= (+ (value c1) 1) (value c2))\n(<= (+ (value c2) 1) (value c3))\n(<= (+ (value c3) 1) (value c4))\n(<= (+ (value c4) 1) (value c5))\n(<= (+ (value c5) 1) (value c6))\n(<= (+ (value c6) 1) (value c7))\n(<= (+ (value c7) 1) (value c8))\n(<= (+ (value c8) 1) (value c9))\n(<= (+ (value c9) 1) (value c10))\n(<= (+ (value c10) 1) (value c11))\n(<= (+ (value c11) 1) (value c12))\n(<= (+ (value c12) 1) (value c13))\n(<= (+ (value c13) 1) (value c14))\n(<= (+ (value c14) 1) (value c15))\n(<= (+ (value c15) 1) (value c16))\n(<= (+ (value c16) 1) (value c17))\n(<= (+ (value c17) 1) (value c18))\n(<= (+ (value c18) 1) (value c19))\n(<= (+ (value c19) 1) (value c20))\n(<= (+ (value c20) 1) (value c21))\n(<= (+ (value c21) 1) (value c22))\n(<= (+ (value c22) 1) (value c23))\n(<= (+ (value c23) 1) (value c24))\n(<= (+ (value c24) 1) (value c25))\n(<= (+ (value c25) 1) (value c26))\n(<= (+ (value c26) 1) (value c27))\n(<= (+ (value c27) 1) (value c28))\n(<= (+ (value c28) 1) (value c29))\n(<= (+ (value c29) 1) (value c30))\n(<= (+ (value c30) 1) (value c31))\n(<= (+ (value c31) 1) (value c32))\n(<= (+ (value c32) 1) (value c33))\n(<= (+ (value c33) 1) (value c34))\n(<= (+ (value c34) 1) (value c35))\n(<= (+ (value c35) 1) (value c36))\n(<= (+ (value c36) 1) (value c37))\n(<= (+ (value c37) 1) (value c38))\n(<= (+ (value c38) 1) (value c39))\n  ))\n\n  \n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p18.pddl",
      "instance_path": "data/pddl/counters/instances/p18.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) 1) (max_int)))\n         :effect (and (increase (value ?c) 1))\n    )\n\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (value ?c) 1))\n         :effect (and (decrease (value ?c) 1))\n    )\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_40_1)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c20 c21 c22 c23 c24 c25 c26 c27 c28 c29 c30 c31 c32 c33 c34 c35 c36 c37 c38 c39 - counter\n  )\n\n  (:init\n    (= (max_int) 80)\n\t(= (value c0) 24)\n\t(= (value c1) 32)\n\t(= (value c2) 17)\n\t(= (value c3) 3)\n\t(= (value c4) 13)\n\t(= (value c5) 51)\n\t(= (value c6) 52)\n\t(= (value c7) 75)\n\t(= (value c8) 69)\n\t(= (value c9) 58)\n\t(= (value c10) 47)\n\t(= (value c11) 23)\n\t(= (value c12) 78)\n\t(= (value c13) 31)\n\t(= (value c14) 3)\n\t(= (value c15) 42)\n\t(= (value c16) 39)\n\t(= (value c17) 74)\n\t(= (value c18) 39)\n\t(= (value c19) 54)\n\t(= (value c20) 50)\n\t(= (value c21) 79)\n\t(= (value c22) 50)\n\t(= (value c23) 62)\n\t(= (value c24) 16)\n\t(= (value c25) 67)\n\t(= (value c26) 16)\n\t(= (value c27) 9)\n\t(= (value c28) 25)\n\t(= (value c29) 71)\n\t(= (value c30) 49)\n\t(= (value c31) 76)\n\t(= (value c32) 28)\n\t(= (value c33) 55)\n\t(= (value c34) 74)\n\t(= (value c35) 76)\n\t(= (value c36) 13)\n\t(= (value c37) 77)\n\t(= (value c38) 52)\n\t(= (value c39) 22)\n  )\n\n  (:goal (and \n(<= (+ (value c0) 1) (value c1))\n(<= (+ (value c1) 1) (value c2))\n(<= (+ (value c2) 1) (value c3))\n(<= (+ (value c3) 1) (value c4))\n(<= (+ (value c4) 1) (value c5))\n(<= (+ (value c5) 1) (value c6))\n(<= (+ (value c6) 1) (value c7))\n(<= (+ (value c7) 1) (value c8))\n(<= (+ (value c8) 1) (value c9))\n(<= (+ (value c9) 1) (value c10))\n(<= (+ (value c10) 1) (value c11))\n(<= (+ (value c11) 1) (value c12))\n(<= (+ (value c12) 1) (value c13))\n(<= (+ (value c13) 1) (value c14))\n(<= (+ (value c14) 1) (value c15))\n(<= (+ (value c15) 1) (value c16))\n(<= (+ (value c16) 1) (value c17))\n(<= (+ (value c17) 1) (value c18))\n(<= (+ (value c18) 1) (value c19))\n(<= (+ (value c19) 1) (value c20))\n(<= (+ (value c20) 1) (value c21))\n(<= (+ (value c21) 1) (value c22))\n(<= (+ (value c22) 1) (value c23))\n(<= (+ (value c23) 1) (value c24))\n(<= (+ (value c24) 1) (value c25))\n(<= (+ (value c25) 1) (value c26))\n(<= (+ (value c26) 1) (value c27))\n(<= (+ (value c27) 1) (value c28))\n(<= (+ (value c28) 1) (value c29))\n(<= (+ (value c29) 1) (value c30))\n(<= (+ (value c30) 1) (value c31))\n(<= (+ (value c31) 1) (value c32))\n(<= (+ (value c32) 1) (value c33))\n(<= (+ (value c33) 1) (value c34))\n(<= (+ (value c34) 1) (value c35))\n(<= (+ (value c35) 1) (value c36))\n(<= (+ (value c36) 1) (value c37))\n(<= (+ (value c37) 1) (value c38))\n(<= (+ (value c38) 1) (value c39))\n  ))\n\n  \n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p19.pddl",
      "instance_path": "data/pddl/counters/instances/p19.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) 1) (max_int)))\n         :effect (and (increase (value ?c) 1))\n    )\n\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (value ?c) 1))\n         :effect (and (decrease (value ?c) 1))\n    )\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_40_2)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c20 c21 c22 c23 c24 c25 c26 c27 c28 c29 c30 c31 c32 c33 c34 c35 c36 c37 c38 c39 - counter\n  )\n\n  (:init\n    (= (max_int) 80)\n\t(= (value c0) 32)\n\t(= (value c1) 45)\n\t(= (value c2) 64)\n\t(= (value c3) 11)\n\t(= (value c4) 27)\n\t(= (value c5) 48)\n\t(= (value c6) 69)\n\t(= (value c7) 42)\n\t(= (value c8) 31)\n\t(= (value c9) 50)\n\t(= (value c10) 77)\n\t(= (value c11) 26)\n\t(= (value c12) 31)\n\t(= (value c13) 9)\n\t(= (value c14) 27)\n\t(= (value c15) 26)\n\t(= (value c16) 58)\n\t(= (value c17) 31)\n\t(= (value c18) 53)\n\t(= (value c19) 17)\n\t(= (value c20) 19)\n\t(= (value c21) 25)\n\t(= (value c22) 20)\n\t(= (value c23) 31)\n\t(= (value c24) 78)\n\t(= (value c25) 42)\n\t(= (value c26) 44)\n\t(= (value c27) 22)\n\t(= (value c28) 50)\n\t(= (value c29) 70)\n\t(= (value c30) 21)\n\t(= (value c31) 3)\n\t(= (value c32) 51)\n\t(= (value c33) 65)\n\t(= (value c34) 40)\n\t(= (value c35) 1)\n\t(= (value c36) 53)\n\t(= (value c37) 23)\n\t(= (value c38) 35)\n\t(= (value c39) 71)\n  )\n\n  (:goal (and \n(<= (+ (value c0) 1) (value c1))\n(<= (+ (value c1) 1) (value c2))\n(<= (+ (value c2) 1) (value c3))\n(<= (+ (value c3) 1) (value c4))\n(<= (+ (value c4) 1) (value c5))\n(<= (+ (value c5) 1) (value c6))\n(<= (+ (value c6) 1) (value c7))\n(<= (+ (value c7) 1) (value c8))\n(<= (+ (value c8) 1) (value c9))\n(<= (+ (value c9) 1) (value c10))\n(<= (+ (value c10) 1) (value c11))\n(<= (+ (value c11) 1) (value c12))\n(<= (+ (value c12) 1) (value c13))\n(<= (+ (value c13) 1) (value c14))\n(<= (+ (value c14) 1) (value c15))\n(<= (+ (value c15) 1) (value c16))\n(<= (+ (value c16) 1) (value c17))\n(<= (+ (value c17) 1) (value c18))\n(<= (+ (value c18) 1) (value c19))\n(<= (+ (value c19) 1) (value c20))\n(<= (+ (value c20) 1) (value c21))\n(<= (+ (value c21) 1) (value c22))\n(<= (+ (value c22) 1) (value c23))\n(<= (+ (value c23) 1) (value c24))\n(<= (+ (value c24) 1) (value c25))\n(<= (+ (value c25) 1) (value c26))\n(<= (+ (value c26) 1) (value c27))\n(<= (+ (value c27) 1) (value c28))\n(<= (+ (value c28) 1) (value c29))\n(<= (+ (value c29) 1) (value c30))\n(<= (+ (value c30) 1) (value c31))\n(<= (+ (value c31) 1) (value c32))\n(<= (+ (value c32) 1) (value c33))\n(<= (+ (value c33) 1) (value c34))\n(<= (+ (value c34) 1) (value c35))\n(<= (+ (value c35) 1) (value c36))\n(<= (+ (value c36) 1) (value c37))\n(<= (+ (value c37) 1) (value c38))\n(<= (+ (value c38) 1) (value c39))\n  ))\n\n  \n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p20.pddl",
      "instance_path": "data/pddl/counters/instances/p20.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) 1) (max_int)))\n         :effect (and (increase (value ?c) 1))\n    )\n\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (value ?c) 1))\n         :effect (and (decrease (value ?c) 1))\n    )\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_40_3)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c20 c21 c22 c23 c24 c25 c26 c27 c28 c29 c30 c31 c32 c33 c34 c35 c36 c37 c38 c39 - counter\n  )\n\n  (:init\n    (= (max_int) 80)\n\t(= (value c0) 52)\n\t(= (value c1) 55)\n\t(= (value c2) 14)\n\t(= (value c3) 37)\n\t(= (value c4) 68)\n\t(= (value c5) 76)\n\t(= (value c6) 79)\n\t(= (value c7) 74)\n\t(= (value c8) 46)\n\t(= (value c9) 52)\n\t(= (value c10) 62)\n\t(= (value c11) 72)\n\t(= (value c12) 52)\n\t(= (value c13) 46)\n\t(= (value c14) 19)\n\t(= (value c15) 62)\n\t(= (value c16) 75)\n\t(= (value c17) 72)\n\t(= (value c18) 22)\n\t(= (value c19) 20)\n\t(= (value c20) 13)\n\t(= (value c21) 38)\n\t(= (value c22) 44)\n\t(= (value c23) 26)\n\t(= (value c24) 44)\n\t(= (value c25) 50)\n\t(= (value c26) 68)\n\t(= (value c27) 76)\n\t(= (value c28) 65)\n\t(= (value c29) 71)\n\t(= (value c30) 37)\n\t(= (value c31) 48)\n\t(= (value c32) 22)\n\t(= (value c33) 68)\n\t(= (value c34) 27)\n\t(= (value c35) 79)\n\t(= (value c36) 67)\n\t(= (value c37) 46)\n\t(= (value c38) 49)\n\t(= (value c39) 22)\n  )\n\n  (:goal (and \n(<= (+ (value c0) 1) (value c1))\n(<= (+ (value c1) 1) (value c2))\n(<= (+ (value c2) 1) (value c3))\n(<= (+ (value c3) 1) (value c4))\n(<= (+ (value c4) 1) (value c5))\n(<= (+ (value c5) 1) (value c6))\n(<= (+ (value c6) 1) (value c7))\n(<= (+ (value c7) 1) (value c8))\n(<= (+ (value c8) 1) (value c9))\n(<= (+ (value c9) 1) (value c10))\n(<= (+ (value c10) 1) (value c11))\n(<= (+ (value c11) 1) (value c12))\n(<= (+ (value c12) 1) (value c13))\n(<= (+ (value c13) 1) (value c14))\n(<= (+ (value c14) 1) (value c15))\n(<= (+ (value c15) 1) (value c16))\n(<= (+ (value c16) 1) (value c17))\n(<= (+ (value c17) 1) (value c18))\n(<= (+ (value c18) 1) (value c19))\n(<= (+ (value c19) 1) (value c20))\n(<= (+ (value c20) 1) (value c21))\n(<= (+ (value c21) 1) (value c22))\n(<= (+ (value c22) 1) (value c23))\n(<= (+ (value c23) 1) (value c24))\n(<= (+ (value c24) 1) (value c25))\n(<= (+ (value c25) 1) (value c26))\n(<= (+ (value c26) 1) (value c27))\n(<= (+ (value c27) 1) (value c28))\n(<= (+ (value c28) 1) (value c29))\n(<= (+ (value c29) 1) (value c30))\n(<= (+ (value c30) 1) (value c31))\n(<= (+ (value c31) 1) (value c32))\n(<= (+ (value c32) 1) (value c33))\n(<= (+ (value c33) 1) (value c34))\n(<= (+ (value c34) 1) (value c35))\n(<= (+ (value c35) 1) (value c36))\n(<= (+ (value c36) 1) (value c37))\n(<= (+ (value c37) 1) (value c38))\n(<= (+ (value c38) 1) (value c39))\n  ))\n\n  \n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    }
  ]
}