{
  "domain": "mprime",
  "domain_file": "data/pddl/mprime/domain_mprime.pddl",
  "prompts": [
    {
      "instance": "p01.pddl",
      "instance_path": "data/pddl/mprime/instances/p01.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain mystery-prime-typed)\n   (:types food emotion - object\n           pleasure pain - emotion)\n   (:predicates\n       (eats ?n1 ?n2 - food)\n       (craves ?v - emotion ?n - food)\n       (fears ?c - pain ?v - pleasure)\n   )\n\n   (:functions\n       (harmony ?v - emotion)\n       (locale ?n - food)\n   )\n\n   (:action overcome\n       :parameters (?c - pain ?v - pleasure ?n - food)\n       :precondition (and (craves ?c ?n)\n                          (craves ?v ?n)\n                          (>= (harmony ?v) 1)\n                     )\n       :effect (and (not (craves ?c ?n))\n                    (fears ?c ?v)\n                    (decrease (harmony ?v) 1)\n               )\n   )\n\n   (:action feast\n       :parameters (?v - pleasure ?n1 ?n2 - food)\n       :precondition (and (craves ?v ?n1)\n                          (eats ?n1 ?n2)\n                          (>= (locale ?n1) 1)\n                     )\n       :effect (and (not (craves ?v ?n1))\n                    (craves ?v ?n2)\n                    (decrease (locale ?n1) 1)\n                    )\n   )\n\n   (:action succumb\n       :parameters (?c - pain ?v - pleasure ?n - food)\n       :precondition (and (fears ?c ?v)\n                          (craves ?v ?n)\n                     )\n       :effect (and (not (fears ?c ?v))\n                    (craves ?c ?n)\n                    (increase (harmony ?v) 1)\n                    ))\n   (:action drink\n      :parameters (?n1 ?n2 - food)\n      :precondition (and (>= (locale ?n1) 1))\n      :effect (and (decrease (locale ?n1) 1)\n                   (increase (locale ?n2) 1))\n   )\n)\n\n```\n\nTask PDDL:\n```\n(define (problem mprime-x-25)\n   (:domain mystery-prime-typed)\n   (:objects wurst tuna pistachio chicken - food\n             expectation rest - pleasure\n             depression angina - pain\n)\n   (:init\n(eats wurst chicken)\n          (eats tuna pistachio)\n          (craves angina chicken)\n          (eats chicken pistachio)\n          (craves rest pistachio)\n(= (locale tuna) 2)\n          (eats chicken wurst)\n(= (harmony expectation) 1)\n\n          (craves expectation tuna)\n\n          (craves depression wurst)\n          (eats pistachio wurst)\n\n\n          (eats tuna wurst)\n(= (locale wurst) 2)\n          (eats pistachio tuna)\n\n          (eats wurst tuna)\n(= (harmony rest) 3)\n\n          (eats wurst pistachio)\n          (eats pistachio chicken)\n\n\n(= (locale chicken) 2)\n(= (locale pistachio) 5))\n   (:goal (and (craves depression chicken))))\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p02.pddl",
      "instance_path": "data/pddl/mprime/instances/p02.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain mystery-prime-typed)\n   (:types food emotion - object\n           pleasure pain - emotion)\n   (:predicates\n       (eats ?n1 ?n2 - food)\n       (craves ?v - emotion ?n - food)\n       (fears ?c - pain ?v - pleasure)\n   )\n\n   (:functions\n       (harmony ?v - emotion)\n       (locale ?n - food)\n   )\n\n   (:action overcome\n       :parameters (?c - pain ?v - pleasure ?n - food)\n       :precondition (and (craves ?c ?n)\n                          (craves ?v ?n)\n                          (>= (harmony ?v) 1)\n                     )\n       :effect (and (not (craves ?c ?n))\n                    (fears ?c ?v)\n                    (decrease (harmony ?v) 1)\n               )\n   )\n\n   (:action feast\n       :parameters (?v - pleasure ?n1 ?n2 - food)\n       :precondition (and (craves ?v ?n1)\n                          (eats ?n1 ?n2)\n                          (>= (locale ?n1) 1)\n                     )\n       :effect (and (not (craves ?v ?n1))\n                    (craves ?v ?n2)\n                    (decrease (locale ?n1) 1)\n                    )\n   )\n\n   (:action succumb\n       :parameters (?c - pain ?v - pleasure ?n - food)\n       :precondition (and (fears ?c ?v)\n                          (craves ?v ?n)\n                     )\n       :effect (and (not (fears ?c ?v))\n                    (craves ?c ?n)\n                    (increase (harmony ?v) 1)\n                    ))\n   (:action drink\n      :parameters (?n1 ?n2 - food)\n      :precondition (and (>= (locale ?n1) 1))\n      :effect (and (decrease (locale ?n1) 1)\n                   (increase (locale ?n2) 1))\n   )\n)\n\n```\n\nTask PDDL:\n```\n(define (problem mprime-x-1)\n   (:domain mystery-prime-typed)\n   (:objects rice pear flounder okra pork lamb - food\n             rest - pleasure\n             hangover depression abrasion - pain\n)\n   (:init\n(eats lamb pork)\n          (eats pork okra)\n(= (locale okra) 6)\n(= (locale pork) 5)\n          (eats pork lamb)\n(= (harmony rest) 3)\n          (eats lamb flounder)\n          (craves depression flounder)\n          (eats okra pear)\n          (eats rice rice)\n          (eats rice flounder)\n\n\n\n          (craves abrasion pork)\n(= (locale rice) 1)\n\n          (eats flounder lamb)\n          (craves rest pork)\n\n(= (locale pear) 2)\n          (craves hangover rice)\n\n\n(= (locale lamb) 3)\n          (eats flounder rice)\n          (eats rice pear)\n\n          (eats pear okra)\n          (eats pear rice)\n          (eats okra pork)\n\n(= (locale flounder) 4))\n   (:goal (and (craves abrasion rice))))\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p03.pddl",
      "instance_path": "data/pddl/mprime/instances/p03.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain mystery-prime-typed)\n   (:types food emotion - object\n           pleasure pain - emotion)\n   (:predicates\n       (eats ?n1 ?n2 - food)\n       (craves ?v - emotion ?n - food)\n       (fears ?c - pain ?v - pleasure)\n   )\n\n   (:functions\n       (harmony ?v - emotion)\n       (locale ?n - food)\n   )\n\n   (:action overcome\n       :parameters (?c - pain ?v - pleasure ?n - food)\n       :precondition (and (craves ?c ?n)\n                          (craves ?v ?n)\n                          (>= (harmony ?v) 1)\n                     )\n       :effect (and (not (craves ?c ?n))\n                    (fears ?c ?v)\n                    (decrease (harmony ?v) 1)\n               )\n   )\n\n   (:action feast\n       :parameters (?v - pleasure ?n1 ?n2 - food)\n       :precondition (and (craves ?v ?n1)\n                          (eats ?n1 ?n2)\n                          (>= (locale ?n1) 1)\n                     )\n       :effect (and (not (craves ?v ?n1))\n                    (craves ?v ?n2)\n                    (decrease (locale ?n1) 1)\n                    )\n   )\n\n   (:action succumb\n       :parameters (?c - pain ?v - pleasure ?n - food)\n       :precondition (and (fears ?c ?v)\n                          (craves ?v ?n)\n                     )\n       :effect (and (not (fears ?c ?v))\n                    (craves ?c ?n)\n                    (increase (harmony ?v) 1)\n                    ))\n   (:action drink\n      :parameters (?n1 ?n2 - food)\n      :precondition (and (>= (locale ?n1) 1))\n      :effect (and (decrease (locale ?n1) 1)\n                   (increase (locale ?n2) 1))\n   )\n)\n\n```\n\nTask PDDL:\n```\n(define (problem mprime-x-28)\n   (:domain mystery-prime-typed)\n   (:objects wurst shrimp muffin broccoli lamb - food\n             intoxication - pleasure\n             loneliness anxiety hangover anger angina boils grief - pain\n)\n   (:init\n(craves hangover shrimp)\n\n          (craves anger muffin)\n          (eats lamb shrimp)\n          (eats shrimp wurst)\n          (eats wurst muffin)\n          (craves intoxication wurst)\n\n          (eats broccoli lamb)\n          (eats wurst lamb)\n          (eats muffin wurst)\n          (craves boils broccoli)\n(= (locale shrimp) 6)\n\n          (eats broccoli muffin)\n(= (locale lamb) 7)\n\n          (eats shrimp lamb)\n\n          (craves anxiety shrimp)\n(= (locale broccoli) 7)\n(= (harmony intoxication) 2)\n          (craves grief lamb)\n(= (locale wurst) 1)\n\n          (eats wurst shrimp)\n(= (locale muffin) 2)\n\n          (eats lamb wurst)\n\n          (eats lamb broccoli)\n          (craves angina muffin)\n          (craves loneliness wurst)\n          (eats muffin broccoli)\n)\n   (:goal (and (craves anger lamb)\n               (craves boils lamb))))\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p04.pddl",
      "instance_path": "data/pddl/mprime/instances/p04.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain mystery-prime-typed)\n   (:types food emotion - object\n           pleasure pain - emotion)\n   (:predicates\n       (eats ?n1 ?n2 - food)\n       (craves ?v - emotion ?n - food)\n       (fears ?c - pain ?v - pleasure)\n   )\n\n   (:functions\n       (harmony ?v - emotion)\n       (locale ?n - food)\n   )\n\n   (:action overcome\n       :parameters (?c - pain ?v - pleasure ?n - food)\n       :precondition (and (craves ?c ?n)\n                          (craves ?v ?n)\n                          (>= (harmony ?v) 1)\n                     )\n       :effect (and (not (craves ?c ?n))\n                    (fears ?c ?v)\n                    (decrease (harmony ?v) 1)\n               )\n   )\n\n   (:action feast\n       :parameters (?v - pleasure ?n1 ?n2 - food)\n       :precondition (and (craves ?v ?n1)\n                          (eats ?n1 ?n2)\n                          (>= (locale ?n1) 1)\n                     )\n       :effect (and (not (craves ?v ?n1))\n                    (craves ?v ?n2)\n                    (decrease (locale ?n1) 1)\n                    )\n   )\n\n   (:action succumb\n       :parameters (?c - pain ?v - pleasure ?n - food)\n       :precondition (and (fears ?c ?v)\n                          (craves ?v ?n)\n                     )\n       :effect (and (not (fears ?c ?v))\n                    (craves ?c ?n)\n                    (increase (harmony ?v) 1)\n                    ))\n   (:action drink\n      :parameters (?n1 ?n2 - food)\n      :precondition (and (>= (locale ?n1) 1))\n      :effect (and (decrease (locale ?n1) 1)\n                   (increase (locale ?n2) 1))\n   )\n)\n\n```\n\nTask PDDL:\n```\n(define (problem mprime-x-27)\n   (:domain mystery-prime-typed)\n   (:objects wurst guava muffin pork onion popover scallion - food\n             triumph love satisfaction - pleasure\n             abrasion anxiety dread loneliness grief boils - pain\n)\n   (:init\n(= (locale wurst) 10)\n          (craves abrasion wurst)\n\n          (eats wurst guava)\n          (eats pork muffin)\n\n          (eats scallion muffin)\n(= (locale onion) 12)\n          (craves anxiety wurst)\n          (eats scallion popover)\n          (craves boils scallion)\n(= (harmony satisfaction) 2)\n          (eats muffin scallion)\n(= (locale scallion) 5)\n          (eats onion wurst)\n          (eats scallion guava)\n\n          (eats muffin pork)\n          (craves triumph onion)\n          (eats wurst onion)\n          (craves dread wurst)\n(= (harmony love) 2)\n\n\n\n(= (locale popover) 9)\n(= (harmony triumph) 3)\n\n\n(= (locale guava) 9)\n(= (locale muffin) 2)\n\n          (eats muffin onion)\n          (craves satisfaction scallion)\n          (eats popover onion)\n          (eats onion muffin)\n          (eats popover scallion)\n\n          (eats guava scallion)\n          (eats onion pork)\n\n          (eats guava wurst)\n\n          (eats onion popover)\n          (eats pork onion)\n\n          (craves love popover)\n          (craves loneliness scallion)\n(= (locale pork) 5)\n          (craves grief scallion)\n\n)\n   (:goal (and (craves grief guava)\n               (craves boils guava))))\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p05.pddl",
      "instance_path": "data/pddl/mprime/instances/p05.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain mystery-prime-typed)\n   (:types food emotion - object\n           pleasure pain - emotion)\n   (:predicates\n       (eats ?n1 ?n2 - food)\n       (craves ?v - emotion ?n - food)\n       (fears ?c - pain ?v - pleasure)\n   )\n\n   (:functions\n       (harmony ?v - emotion)\n       (locale ?n - food)\n   )\n\n   (:action overcome\n       :parameters (?c - pain ?v - pleasure ?n - food)\n       :precondition (and (craves ?c ?n)\n                          (craves ?v ?n)\n                          (>= (harmony ?v) 1)\n                     )\n       :effect (and (not (craves ?c ?n))\n                    (fears ?c ?v)\n                    (decrease (harmony ?v) 1)\n               )\n   )\n\n   (:action feast\n       :parameters (?v - pleasure ?n1 ?n2 - food)\n       :precondition (and (craves ?v ?n1)\n                          (eats ?n1 ?n2)\n                          (>= (locale ?n1) 1)\n                     )\n       :effect (and (not (craves ?v ?n1))\n                    (craves ?v ?n2)\n                    (decrease (locale ?n1) 1)\n                    )\n   )\n\n   (:action succumb\n       :parameters (?c - pain ?v - pleasure ?n - food)\n       :precondition (and (fears ?c ?v)\n                          (craves ?v ?n)\n                     )\n       :effect (and (not (fears ?c ?v))\n                    (craves ?c ?n)\n                    (increase (harmony ?v) 1)\n                    ))\n   (:action drink\n      :parameters (?n1 ?n2 - food)\n      :precondition (and (>= (locale ?n1) 1))\n      :effect (and (decrease (locale ?n1) 1)\n                   (increase (locale ?n2) 1))\n   )\n)\n\n```\n\nTask PDDL:\n```\n(define (problem mprime-x-4)\n   (:domain mystery-prime-typed)\n   (:objects muffin ham scallion shrimp cherry grapefruit bacon\n             arugula scallop wurst - food\n             aesthetics - pleasure\n             hangover dread sciatica jealousy loneliness abrasion anger\n             - pain\n)\n   (:init\n(= (locale cherry) 4)\n          (eats ham muffin)\n          (eats cherry shrimp)\n(= (locale scallion) 1)\n          (craves dread ham)\n          (eats cherry ham)\n          (eats grapefruit scallop)\n          (craves sciatica grapefruit)\n          (eats wurst bacon)\n          (eats muffin ham)\n\n          (eats arugula scallop)\n          (eats arugula bacon)\n          (eats bacon wurst)\n          (eats arugula muffin)\n          (craves anger wurst)\n          (eats scallion shrimp)\n          (eats arugula wurst)\n(= (locale arugula) 4)\n          (eats grapefruit wurst)\n          (craves loneliness arugula)\n(= (harmony aesthetics) 1)\n          (eats muffin cherry)\n          (eats scallop arugula)\n(= (locale muffin) 4)\n(= (locale grapefruit) 0)\n          (craves hangover muffin)\n          (eats cherry arugula)\n          (eats shrimp scallion)\n(= (locale ham) 2)\n          (eats muffin scallion)\n          (eats arugula cherry)\n          (eats scallop grapefruit)\n          (craves abrasion scallop)\n          (eats bacon arugula)\n          (eats ham cherry)\n          (eats cherry muffin)\n(= (locale bacon) 1)\n(= (locale wurst) 0)\n\n(= (locale scallop) 3)\n          (eats shrimp cherry)\n          (eats wurst arugula)\n\n          (eats muffin arugula)\n\n          (craves aesthetics shrimp)\n          (eats scallion muffin)\n\n(= (locale shrimp) 2)\n          (craves jealousy bacon)\n          (eats wurst grapefruit))\n   (:goal (and (craves sciatica wurst))))\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    }
  ]
}