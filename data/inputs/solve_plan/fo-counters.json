{
  "domain": "fo-counters",
  "domain_file": "data/pddl/fo-counters/domain.pddl",
  "prompts": [
    {
      "instance": "p01.pddl",
      "instance_path": "data/pddl/fo-counters/instances/p01.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (rate_value ?c - counter);;\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n        (total-cost)\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) (rate_value ?c)) (max_int)))\n         :effect (and (increase (value ?c) (rate_value ?c)) (increase (total-cost) 1))\n    )\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (- (value ?c) (rate_value ?c)) 0))\n         :effect (and (decrease (value ?c) (rate_value ?c))(increase (total-cost) 1))\n    )\n\n    (:action increase_rate\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (rate_value ?c) 1) 10))\n         :effect (and (increase (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n    (:action decrement_rate\n         :parameters (?c - counter)\n         :precondition (and (>= (rate_value ?c) 1))\n         :effect (and (decrease (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_2)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 - counter\n  )\n\n  (:init\n    (= (max_int) 4)\n        (= (value c0) 0)\n        (= (value c1) 0)\n\n        (= (rate_value c0) 0)\n        (= (rate_value c1) 0)\n        (= (total-cost) 0)\n  )\n\n  (:goal (and\n    (<= (+ (value c0) 1) (value c1))\n  ))\n  (:metric minimize (total-cost))\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p02.pddl",
      "instance_path": "data/pddl/fo-counters/instances/p02.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (rate_value ?c - counter);;\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n        (total-cost)\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) (rate_value ?c)) (max_int)))\n         :effect (and (increase (value ?c) (rate_value ?c)) (increase (total-cost) 1))\n    )\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (- (value ?c) (rate_value ?c)) 0))\n         :effect (and (decrease (value ?c) (rate_value ?c))(increase (total-cost) 1))\n    )\n\n    (:action increase_rate\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (rate_value ?c) 1) 10))\n         :effect (and (increase (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n    (:action decrement_rate\n         :parameters (?c - counter)\n         :precondition (and (>= (rate_value ?c) 1))\n         :effect (and (decrease (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_3)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 - counter\n  )\n\n  (:init\n    (= (max_int) 6)\n        (= (value c0) 0)\n        (= (value c1) 0)\n        (= (value c2) 0)\n\n        (= (rate_value c0) 0)\n        (= (rate_value c1) 0)\n        (= (rate_value c2) 0)\n  )\n\n  (:goal (and\n    (<= (+ (value c0) 1) (value c1))\n    (<= (+ (value c1) 1) (value c2))\n  ))\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p03.pddl",
      "instance_path": "data/pddl/fo-counters/instances/p03.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (rate_value ?c - counter);;\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n        (total-cost)\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) (rate_value ?c)) (max_int)))\n         :effect (and (increase (value ?c) (rate_value ?c)) (increase (total-cost) 1))\n    )\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (- (value ?c) (rate_value ?c)) 0))\n         :effect (and (decrease (value ?c) (rate_value ?c))(increase (total-cost) 1))\n    )\n\n    (:action increase_rate\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (rate_value ?c) 1) 10))\n         :effect (and (increase (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n    (:action decrement_rate\n         :parameters (?c - counter)\n         :precondition (and (>= (rate_value ?c) 1))\n         :effect (and (decrease (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_4)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 - counter\n  )\n\n  (:init\n    (= (max_int) 8)\n        (= (value c0) 0)\n        (= (value c1) 0)\n        (= (value c2) 0)\n        (= (value c3) 0)\n\n        (= (rate_value c0) 0)\n        (= (rate_value c1) 0)\n        (= (rate_value c2) 0)\n        (= (rate_value c3) 0)\n  )\n\n  (:goal (and\n    (<= (+ (value c0) 1) (value c1))\n    (<= (+ (value c1) 1) (value c2))\n    (<= (+ (value c2) 1) (value c3))\n  ))\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p04.pddl",
      "instance_path": "data/pddl/fo-counters/instances/p04.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (rate_value ?c - counter);;\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n        (total-cost)\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) (rate_value ?c)) (max_int)))\n         :effect (and (increase (value ?c) (rate_value ?c)) (increase (total-cost) 1))\n    )\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (- (value ?c) (rate_value ?c)) 0))\n         :effect (and (decrease (value ?c) (rate_value ?c))(increase (total-cost) 1))\n    )\n\n    (:action increase_rate\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (rate_value ?c) 1) 10))\n         :effect (and (increase (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n    (:action decrement_rate\n         :parameters (?c - counter)\n         :precondition (and (>= (rate_value ?c) 1))\n         :effect (and (decrease (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_5)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 - counter\n  )\n\n  (:init\n    (= (max_int) 10)\n        (= (value c0) 0)\n        (= (value c1) 0)\n        (= (value c2) 0)\n        (= (value c3) 0)\n        (= (value c4) 0)\n\n        (= (rate_value c0) 0)\n        (= (rate_value c1) 0)\n        (= (rate_value c2) 0)\n        (= (rate_value c3) 0)\n        (= (rate_value c4) 0)\n  )\n\n  (:goal (and\n    (<= (+ (value c0) 1) (value c1))\n    (<= (+ (value c1) 1) (value c2))\n    (<= (+ (value c2) 1) (value c3))\n    (<= (+ (value c3) 1) (value c4))\n  ))\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p05.pddl",
      "instance_path": "data/pddl/fo-counters/instances/p05.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (rate_value ?c - counter);;\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n        (total-cost)\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) (rate_value ?c)) (max_int)))\n         :effect (and (increase (value ?c) (rate_value ?c)) (increase (total-cost) 1))\n    )\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (- (value ?c) (rate_value ?c)) 0))\n         :effect (and (decrease (value ?c) (rate_value ?c))(increase (total-cost) 1))\n    )\n\n    (:action increase_rate\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (rate_value ?c) 1) 10))\n         :effect (and (increase (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n    (:action decrement_rate\n         :parameters (?c - counter)\n         :precondition (and (>= (rate_value ?c) 1))\n         :effect (and (decrease (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_6)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 - counter\n  )\n\n  (:init\n    (= (max_int) 12)\n        (= (value c0) 0)\n        (= (value c1) 0)\n        (= (value c2) 0)\n        (= (value c3) 0)\n        (= (value c4) 0)\n        (= (value c5) 0)\n\n        (= (rate_value c0) 0)\n        (= (rate_value c1) 0)\n        (= (rate_value c2) 0)\n        (= (rate_value c3) 0)\n        (= (rate_value c4) 0)\n        (= (rate_value c5) 0)\n  )\n\n  (:goal (and\n    (<= (+ (value c0) 1) (value c1))\n    (<= (+ (value c1) 1) (value c2))\n    (<= (+ (value c2) 1) (value c3))\n    (<= (+ (value c3) 1) (value c4))\n    (<= (+ (value c4) 1) (value c5))\n  ))\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p06.pddl",
      "instance_path": "data/pddl/fo-counters/instances/p06.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (rate_value ?c - counter);;\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n        (total-cost)\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) (rate_value ?c)) (max_int)))\n         :effect (and (increase (value ?c) (rate_value ?c)) (increase (total-cost) 1))\n    )\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (- (value ?c) (rate_value ?c)) 0))\n         :effect (and (decrease (value ?c) (rate_value ?c))(increase (total-cost) 1))\n    )\n\n    (:action increase_rate\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (rate_value ?c) 1) 10))\n         :effect (and (increase (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n    (:action decrement_rate\n         :parameters (?c - counter)\n         :precondition (and (>= (rate_value ?c) 1))\n         :effect (and (decrease (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_7)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 - counter\n  )\n\n  (:init\n    (= (max_int) 14)\n        (= (value c0) 0)\n        (= (value c1) 0)\n        (= (value c2) 0)\n        (= (value c3) 0)\n        (= (value c4) 0)\n        (= (value c5) 0)\n        (= (value c6) 0)\n\n        (= (rate_value c0) 0)\n        (= (rate_value c1) 0)\n        (= (rate_value c2) 0)\n        (= (rate_value c3) 0)\n        (= (rate_value c4) 0)\n        (= (rate_value c5) 0)\n        (= (rate_value c6) 0)\n  )\n\n  (:goal (and\n    (<= (+ (value c0) 1) (value c1))\n    (<= (+ (value c1) 1) (value c2))\n    (<= (+ (value c2) 1) (value c3))\n    (<= (+ (value c3) 1) (value c4))\n    (<= (+ (value c4) 1) (value c5))\n    (<= (+ (value c5) 1) (value c6))\n  ))\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p07.pddl",
      "instance_path": "data/pddl/fo-counters/instances/p07.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (rate_value ?c - counter);;\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n        (total-cost)\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) (rate_value ?c)) (max_int)))\n         :effect (and (increase (value ?c) (rate_value ?c)) (increase (total-cost) 1))\n    )\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (- (value ?c) (rate_value ?c)) 0))\n         :effect (and (decrease (value ?c) (rate_value ?c))(increase (total-cost) 1))\n    )\n\n    (:action increase_rate\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (rate_value ?c) 1) 10))\n         :effect (and (increase (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n    (:action decrement_rate\n         :parameters (?c - counter)\n         :precondition (and (>= (rate_value ?c) 1))\n         :effect (and (decrease (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_8)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 - counter\n  )\n\n  (:init\n    (= (max_int) 16)\n        (= (value c0) 0)\n        (= (value c1) 0)\n        (= (value c2) 0)\n        (= (value c3) 0)\n        (= (value c4) 0)\n        (= (value c5) 0)\n        (= (value c6) 0)\n        (= (value c7) 0)\n\n        (= (rate_value c0) 0)\n        (= (rate_value c1) 0)\n        (= (rate_value c2) 0)\n        (= (rate_value c3) 0)\n        (= (rate_value c4) 0)\n        (= (rate_value c5) 0)\n        (= (rate_value c6) 0)\n        (= (rate_value c7) 0)\n  )\n\n  (:goal (and\n    (<= (+ (value c0) 1) (value c1))\n    (<= (+ (value c1) 1) (value c2))\n    (<= (+ (value c2) 1) (value c3))\n    (<= (+ (value c3) 1) (value c4))\n    (<= (+ (value c4) 1) (value c5))\n    (<= (+ (value c5) 1) (value c6))\n    (<= (+ (value c6) 1) (value c7))\n  ))\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p08.pddl",
      "instance_path": "data/pddl/fo-counters/instances/p08.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (rate_value ?c - counter);;\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n        (total-cost)\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) (rate_value ?c)) (max_int)))\n         :effect (and (increase (value ?c) (rate_value ?c)) (increase (total-cost) 1))\n    )\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (- (value ?c) (rate_value ?c)) 0))\n         :effect (and (decrease (value ?c) (rate_value ?c))(increase (total-cost) 1))\n    )\n\n    (:action increase_rate\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (rate_value ?c) 1) 10))\n         :effect (and (increase (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n    (:action decrement_rate\n         :parameters (?c - counter)\n         :precondition (and (>= (rate_value ?c) 1))\n         :effect (and (decrease (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_9)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 - counter\n  )\n\n  (:init\n    (= (max_int) 18)\n        (= (value c0) 0)\n        (= (value c1) 0)\n        (= (value c2) 0)\n        (= (value c3) 0)\n        (= (value c4) 0)\n        (= (value c5) 0)\n        (= (value c6) 0)\n        (= (value c7) 0)\n        (= (value c8) 0)\n\n        (= (rate_value c0) 0)\n        (= (rate_value c1) 0)\n        (= (rate_value c2) 0)\n        (= (rate_value c3) 0)\n        (= (rate_value c4) 0)\n        (= (rate_value c5) 0)\n        (= (rate_value c6) 0)\n        (= (rate_value c7) 0)\n        (= (rate_value c8) 0)\n  )\n\n  (:goal (and\n    (<= (+ (value c0) 1) (value c1))\n    (<= (+ (value c1) 1) (value c2))\n    (<= (+ (value c2) 1) (value c3))\n    (<= (+ (value c3) 1) (value c4))\n    (<= (+ (value c4) 1) (value c5))\n    (<= (+ (value c5) 1) (value c6))\n    (<= (+ (value c6) 1) (value c7))\n    (<= (+ (value c7) 1) (value c8))\n  ))\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p09.pddl",
      "instance_path": "data/pddl/fo-counters/instances/p09.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (rate_value ?c - counter);;\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n        (total-cost)\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) (rate_value ?c)) (max_int)))\n         :effect (and (increase (value ?c) (rate_value ?c)) (increase (total-cost) 1))\n    )\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (- (value ?c) (rate_value ?c)) 0))\n         :effect (and (decrease (value ?c) (rate_value ?c))(increase (total-cost) 1))\n    )\n\n    (:action increase_rate\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (rate_value ?c) 1) 10))\n         :effect (and (increase (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n    (:action decrement_rate\n         :parameters (?c - counter)\n         :precondition (and (>= (rate_value ?c) 1))\n         :effect (and (decrease (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_10)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 - counter\n  )\n\n  (:init\n    (= (max_int) 20)\n        (= (value c0) 0)\n        (= (value c1) 0)\n        (= (value c2) 0)\n        (= (value c3) 0)\n        (= (value c4) 0)\n        (= (value c5) 0)\n        (= (value c6) 0)\n        (= (value c7) 0)\n        (= (value c8) 0)\n        (= (value c9) 0)\n\n        (= (rate_value c0) 0)\n        (= (rate_value c1) 0)\n        (= (rate_value c2) 0)\n        (= (rate_value c3) 0)\n        (= (rate_value c4) 0)\n        (= (rate_value c5) 0)\n        (= (rate_value c6) 0)\n        (= (rate_value c7) 0)\n        (= (rate_value c8) 0)\n        (= (rate_value c9) 0)\n  )\n\n  (:goal (and\n    (<= (+ (value c0) 1) (value c1))\n    (<= (+ (value c1) 1) (value c2))\n    (<= (+ (value c2) 1) (value c3))\n    (<= (+ (value c3) 1) (value c4))\n    (<= (+ (value c4) 1) (value c5))\n    (<= (+ (value c5) 1) (value c6))\n    (<= (+ (value c6) 1) (value c7))\n    (<= (+ (value c7) 1) (value c8))\n    (<= (+ (value c8) 1) (value c9))\n  ))\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p10.pddl",
      "instance_path": "data/pddl/fo-counters/instances/p10.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (rate_value ?c - counter);;\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n        (total-cost)\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) (rate_value ?c)) (max_int)))\n         :effect (and (increase (value ?c) (rate_value ?c)) (increase (total-cost) 1))\n    )\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (- (value ?c) (rate_value ?c)) 0))\n         :effect (and (decrease (value ?c) (rate_value ?c))(increase (total-cost) 1))\n    )\n\n    (:action increase_rate\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (rate_value ?c) 1) 10))\n         :effect (and (increase (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n    (:action decrement_rate\n         :parameters (?c - counter)\n         :precondition (and (>= (rate_value ?c) 1))\n         :effect (and (decrease (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_11)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 - counter\n  )\n\n  (:init\n    (= (max_int) 22)\n        (= (value c0) 0)\n        (= (value c1) 0)\n        (= (value c2) 0)\n        (= (value c3) 0)\n        (= (value c4) 0)\n        (= (value c5) 0)\n        (= (value c6) 0)\n        (= (value c7) 0)\n        (= (value c8) 0)\n        (= (value c9) 0)\n        (= (value c10) 0)\n\n        (= (rate_value c0) 0)\n        (= (rate_value c1) 0)\n        (= (rate_value c2) 0)\n        (= (rate_value c3) 0)\n        (= (rate_value c4) 0)\n        (= (rate_value c5) 0)\n        (= (rate_value c6) 0)\n        (= (rate_value c7) 0)\n        (= (rate_value c8) 0)\n        (= (rate_value c9) 0)\n        (= (rate_value c10) 0)\n  )\n\n  (:goal (and\n    (<= (+ (value c0) 1) (value c1))\n    (<= (+ (value c1) 1) (value c2))\n    (<= (+ (value c2) 1) (value c3))\n    (<= (+ (value c3) 1) (value c4))\n    (<= (+ (value c4) 1) (value c5))\n    (<= (+ (value c5) 1) (value c6))\n    (<= (+ (value c6) 1) (value c7))\n    (<= (+ (value c7) 1) (value c8))\n    (<= (+ (value c8) 1) (value c9))\n    (<= (+ (value c9) 1) (value c10))\n  ))\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p11.pddl",
      "instance_path": "data/pddl/fo-counters/instances/p11.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (rate_value ?c - counter);;\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n        (total-cost)\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) (rate_value ?c)) (max_int)))\n         :effect (and (increase (value ?c) (rate_value ?c)) (increase (total-cost) 1))\n    )\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (- (value ?c) (rate_value ?c)) 0))\n         :effect (and (decrease (value ?c) (rate_value ?c))(increase (total-cost) 1))\n    )\n\n    (:action increase_rate\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (rate_value ?c) 1) 10))\n         :effect (and (increase (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n    (:action decrement_rate\n         :parameters (?c - counter)\n         :precondition (and (>= (rate_value ?c) 1))\n         :effect (and (decrease (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_12)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 - counter\n  )\n\n  (:init\n    (= (max_int) 24)\n        (= (value c0) 0)\n        (= (value c1) 0)\n        (= (value c2) 0)\n        (= (value c3) 0)\n        (= (value c4) 0)\n        (= (value c5) 0)\n        (= (value c6) 0)\n        (= (value c7) 0)\n        (= (value c8) 0)\n        (= (value c9) 0)\n        (= (value c10) 0)\n        (= (value c11) 0)\n\n        (= (rate_value c0) 0)\n        (= (rate_value c1) 0)\n        (= (rate_value c2) 0)\n        (= (rate_value c3) 0)\n        (= (rate_value c4) 0)\n        (= (rate_value c5) 0)\n        (= (rate_value c6) 0)\n        (= (rate_value c7) 0)\n        (= (rate_value c8) 0)\n        (= (rate_value c9) 0)\n        (= (rate_value c10) 0)\n        (= (rate_value c11) 0)\n  )\n\n  (:goal (and\n    (<= (+ (value c0) 1) (value c1))\n    (<= (+ (value c1) 1) (value c2))\n    (<= (+ (value c2) 1) (value c3))\n    (<= (+ (value c3) 1) (value c4))\n    (<= (+ (value c4) 1) (value c5))\n    (<= (+ (value c5) 1) (value c6))\n    (<= (+ (value c6) 1) (value c7))\n    (<= (+ (value c7) 1) (value c8))\n    (<= (+ (value c8) 1) (value c9))\n    (<= (+ (value c9) 1) (value c10))\n    (<= (+ (value c10) 1) (value c11))\n  ))\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p12.pddl",
      "instance_path": "data/pddl/fo-counters/instances/p12.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (rate_value ?c - counter);;\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n        (total-cost)\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) (rate_value ?c)) (max_int)))\n         :effect (and (increase (value ?c) (rate_value ?c)) (increase (total-cost) 1))\n    )\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (- (value ?c) (rate_value ?c)) 0))\n         :effect (and (decrease (value ?c) (rate_value ?c))(increase (total-cost) 1))\n    )\n\n    (:action increase_rate\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (rate_value ?c) 1) 10))\n         :effect (and (increase (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n    (:action decrement_rate\n         :parameters (?c - counter)\n         :precondition (and (>= (rate_value ?c) 1))\n         :effect (and (decrease (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_13)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 - counter\n  )\n\n  (:init\n    (= (max_int) 26)\n        (= (value c0) 0)\n        (= (value c1) 0)\n        (= (value c2) 0)\n        (= (value c3) 0)\n        (= (value c4) 0)\n        (= (value c5) 0)\n        (= (value c6) 0)\n        (= (value c7) 0)\n        (= (value c8) 0)\n        (= (value c9) 0)\n        (= (value c10) 0)\n        (= (value c11) 0)\n        (= (value c12) 0)\n\n        (= (rate_value c0) 0)\n        (= (rate_value c1) 0)\n        (= (rate_value c2) 0)\n        (= (rate_value c3) 0)\n        (= (rate_value c4) 0)\n        (= (rate_value c5) 0)\n        (= (rate_value c6) 0)\n        (= (rate_value c7) 0)\n        (= (rate_value c8) 0)\n        (= (rate_value c9) 0)\n        (= (rate_value c10) 0)\n        (= (rate_value c11) 0)\n        (= (rate_value c12) 0)\n  )\n\n  (:goal (and\n    (<= (+ (value c0) 1) (value c1))\n    (<= (+ (value c1) 1) (value c2))\n    (<= (+ (value c2) 1) (value c3))\n    (<= (+ (value c3) 1) (value c4))\n    (<= (+ (value c4) 1) (value c5))\n    (<= (+ (value c5) 1) (value c6))\n    (<= (+ (value c6) 1) (value c7))\n    (<= (+ (value c7) 1) (value c8))\n    (<= (+ (value c8) 1) (value c9))\n    (<= (+ (value c9) 1) (value c10))\n    (<= (+ (value c10) 1) (value c11))\n    (<= (+ (value c11) 1) (value c12))\n  ))\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p13.pddl",
      "instance_path": "data/pddl/fo-counters/instances/p13.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (rate_value ?c - counter);;\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n        (total-cost)\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) (rate_value ?c)) (max_int)))\n         :effect (and (increase (value ?c) (rate_value ?c)) (increase (total-cost) 1))\n    )\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (- (value ?c) (rate_value ?c)) 0))\n         :effect (and (decrease (value ?c) (rate_value ?c))(increase (total-cost) 1))\n    )\n\n    (:action increase_rate\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (rate_value ?c) 1) 10))\n         :effect (and (increase (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n    (:action decrement_rate\n         :parameters (?c - counter)\n         :precondition (and (>= (rate_value ?c) 1))\n         :effect (and (decrease (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_14)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 - counter\n  )\n\n  (:init\n    (= (max_int) 28)\n        (= (value c0) 0)\n        (= (value c1) 0)\n        (= (value c2) 0)\n        (= (value c3) 0)\n        (= (value c4) 0)\n        (= (value c5) 0)\n        (= (value c6) 0)\n        (= (value c7) 0)\n        (= (value c8) 0)\n        (= (value c9) 0)\n        (= (value c10) 0)\n        (= (value c11) 0)\n        (= (value c12) 0)\n        (= (value c13) 0)\n\n        (= (rate_value c0) 0)\n        (= (rate_value c1) 0)\n        (= (rate_value c2) 0)\n        (= (rate_value c3) 0)\n        (= (rate_value c4) 0)\n        (= (rate_value c5) 0)\n        (= (rate_value c6) 0)\n        (= (rate_value c7) 0)\n        (= (rate_value c8) 0)\n        (= (rate_value c9) 0)\n        (= (rate_value c10) 0)\n        (= (rate_value c11) 0)\n        (= (rate_value c12) 0)\n        (= (rate_value c13) 0)\n  )\n\n  (:goal (and\n    (<= (+ (value c0) 1) (value c1))\n    (<= (+ (value c1) 1) (value c2))\n    (<= (+ (value c2) 1) (value c3))\n    (<= (+ (value c3) 1) (value c4))\n    (<= (+ (value c4) 1) (value c5))\n    (<= (+ (value c5) 1) (value c6))\n    (<= (+ (value c6) 1) (value c7))\n    (<= (+ (value c7) 1) (value c8))\n    (<= (+ (value c8) 1) (value c9))\n    (<= (+ (value c9) 1) (value c10))\n    (<= (+ (value c10) 1) (value c11))\n    (<= (+ (value c11) 1) (value c12))\n    (<= (+ (value c12) 1) (value c13))\n  ))\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p14.pddl",
      "instance_path": "data/pddl/fo-counters/instances/p14.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (rate_value ?c - counter);;\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n        (total-cost)\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) (rate_value ?c)) (max_int)))\n         :effect (and (increase (value ?c) (rate_value ?c)) (increase (total-cost) 1))\n    )\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (- (value ?c) (rate_value ?c)) 0))\n         :effect (and (decrease (value ?c) (rate_value ?c))(increase (total-cost) 1))\n    )\n\n    (:action increase_rate\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (rate_value ?c) 1) 10))\n         :effect (and (increase (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n    (:action decrement_rate\n         :parameters (?c - counter)\n         :precondition (and (>= (rate_value ?c) 1))\n         :effect (and (decrease (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_15)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 - counter\n  )\n\n  (:init\n    (= (max_int) 30)\n        (= (value c0) 0)\n        (= (value c1) 0)\n        (= (value c2) 0)\n        (= (value c3) 0)\n        (= (value c4) 0)\n        (= (value c5) 0)\n        (= (value c6) 0)\n        (= (value c7) 0)\n        (= (value c8) 0)\n        (= (value c9) 0)\n        (= (value c10) 0)\n        (= (value c11) 0)\n        (= (value c12) 0)\n        (= (value c13) 0)\n        (= (value c14) 0)\n\n        (= (rate_value c0) 0)\n        (= (rate_value c1) 0)\n        (= (rate_value c2) 0)\n        (= (rate_value c3) 0)\n        (= (rate_value c4) 0)\n        (= (rate_value c5) 0)\n        (= (rate_value c6) 0)\n        (= (rate_value c7) 0)\n        (= (rate_value c8) 0)\n        (= (rate_value c9) 0)\n        (= (rate_value c10) 0)\n        (= (rate_value c11) 0)\n        (= (rate_value c12) 0)\n        (= (rate_value c13) 0)\n        (= (rate_value c14) 0)\n  )\n\n  (:goal (and\n    (<= (+ (value c0) 1) (value c1))\n    (<= (+ (value c1) 1) (value c2))\n    (<= (+ (value c2) 1) (value c3))\n    (<= (+ (value c3) 1) (value c4))\n    (<= (+ (value c4) 1) (value c5))\n    (<= (+ (value c5) 1) (value c6))\n    (<= (+ (value c6) 1) (value c7))\n    (<= (+ (value c7) 1) (value c8))\n    (<= (+ (value c8) 1) (value c9))\n    (<= (+ (value c9) 1) (value c10))\n    (<= (+ (value c10) 1) (value c11))\n    (<= (+ (value c11) 1) (value c12))\n    (<= (+ (value c12) 1) (value c13))\n    (<= (+ (value c13) 1) (value c14))\n  ))\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p15.pddl",
      "instance_path": "data/pddl/fo-counters/instances/p15.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (rate_value ?c - counter);;\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n        (total-cost)\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) (rate_value ?c)) (max_int)))\n         :effect (and (increase (value ?c) (rate_value ?c)) (increase (total-cost) 1))\n    )\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (- (value ?c) (rate_value ?c)) 0))\n         :effect (and (decrease (value ?c) (rate_value ?c))(increase (total-cost) 1))\n    )\n\n    (:action increase_rate\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (rate_value ?c) 1) 10))\n         :effect (and (increase (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n    (:action decrement_rate\n         :parameters (?c - counter)\n         :precondition (and (>= (rate_value ?c) 1))\n         :effect (and (decrease (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_16)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 - counter\n  )\n\n  (:init\n    (= (max_int) 32)\n        (= (value c0) 0)\n        (= (value c1) 0)\n        (= (value c2) 0)\n        (= (value c3) 0)\n        (= (value c4) 0)\n        (= (value c5) 0)\n        (= (value c6) 0)\n        (= (value c7) 0)\n        (= (value c8) 0)\n        (= (value c9) 0)\n        (= (value c10) 0)\n        (= (value c11) 0)\n        (= (value c12) 0)\n        (= (value c13) 0)\n        (= (value c14) 0)\n        (= (value c15) 0)\n\n        (= (rate_value c0) 0)\n        (= (rate_value c1) 0)\n        (= (rate_value c2) 0)\n        (= (rate_value c3) 0)\n        (= (rate_value c4) 0)\n        (= (rate_value c5) 0)\n        (= (rate_value c6) 0)\n        (= (rate_value c7) 0)\n        (= (rate_value c8) 0)\n        (= (rate_value c9) 0)\n        (= (rate_value c10) 0)\n        (= (rate_value c11) 0)\n        (= (rate_value c12) 0)\n        (= (rate_value c13) 0)\n        (= (rate_value c14) 0)\n        (= (rate_value c15) 0)\n  )\n\n  (:goal (and\n    (<= (+ (value c0) 1) (value c1))\n    (<= (+ (value c1) 1) (value c2))\n    (<= (+ (value c2) 1) (value c3))\n    (<= (+ (value c3) 1) (value c4))\n    (<= (+ (value c4) 1) (value c5))\n    (<= (+ (value c5) 1) (value c6))\n    (<= (+ (value c6) 1) (value c7))\n    (<= (+ (value c7) 1) (value c8))\n    (<= (+ (value c8) 1) (value c9))\n    (<= (+ (value c9) 1) (value c10))\n    (<= (+ (value c10) 1) (value c11))\n    (<= (+ (value c11) 1) (value c12))\n    (<= (+ (value c12) 1) (value c13))\n    (<= (+ (value c13) 1) (value c14))\n    (<= (+ (value c14) 1) (value c15))\n  ))\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p16.pddl",
      "instance_path": "data/pddl/fo-counters/instances/p16.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (rate_value ?c - counter);;\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n        (total-cost)\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) (rate_value ?c)) (max_int)))\n         :effect (and (increase (value ?c) (rate_value ?c)) (increase (total-cost) 1))\n    )\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (- (value ?c) (rate_value ?c)) 0))\n         :effect (and (decrease (value ?c) (rate_value ?c))(increase (total-cost) 1))\n    )\n\n    (:action increase_rate\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (rate_value ?c) 1) 10))\n         :effect (and (increase (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n    (:action decrement_rate\n         :parameters (?c - counter)\n         :precondition (and (>= (rate_value ?c) 1))\n         :effect (and (decrease (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_17)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 - counter\n  )\n\n  (:init\n    (= (max_int) 34)\n        (= (value c0) 0)\n        (= (value c1) 0)\n        (= (value c2) 0)\n        (= (value c3) 0)\n        (= (value c4) 0)\n        (= (value c5) 0)\n        (= (value c6) 0)\n        (= (value c7) 0)\n        (= (value c8) 0)\n        (= (value c9) 0)\n        (= (value c10) 0)\n        (= (value c11) 0)\n        (= (value c12) 0)\n        (= (value c13) 0)\n        (= (value c14) 0)\n        (= (value c15) 0)\n        (= (value c16) 0)\n\n        (= (rate_value c0) 0)\n        (= (rate_value c1) 0)\n        (= (rate_value c2) 0)\n        (= (rate_value c3) 0)\n        (= (rate_value c4) 0)\n        (= (rate_value c5) 0)\n        (= (rate_value c6) 0)\n        (= (rate_value c7) 0)\n        (= (rate_value c8) 0)\n        (= (rate_value c9) 0)\n        (= (rate_value c10) 0)\n        (= (rate_value c11) 0)\n        (= (rate_value c12) 0)\n        (= (rate_value c13) 0)\n        (= (rate_value c14) 0)\n        (= (rate_value c15) 0)\n        (= (rate_value c16) 0)\n  )\n\n  (:goal (and\n    (<= (+ (value c0) 1) (value c1))\n    (<= (+ (value c1) 1) (value c2))\n    (<= (+ (value c2) 1) (value c3))\n    (<= (+ (value c3) 1) (value c4))\n    (<= (+ (value c4) 1) (value c5))\n    (<= (+ (value c5) 1) (value c6))\n    (<= (+ (value c6) 1) (value c7))\n    (<= (+ (value c7) 1) (value c8))\n    (<= (+ (value c8) 1) (value c9))\n    (<= (+ (value c9) 1) (value c10))\n    (<= (+ (value c10) 1) (value c11))\n    (<= (+ (value c11) 1) (value c12))\n    (<= (+ (value c12) 1) (value c13))\n    (<= (+ (value c13) 1) (value c14))\n    (<= (+ (value c14) 1) (value c15))\n    (<= (+ (value c15) 1) (value c16))\n  ))\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p17.pddl",
      "instance_path": "data/pddl/fo-counters/instances/p17.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (rate_value ?c - counter);;\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n        (total-cost)\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) (rate_value ?c)) (max_int)))\n         :effect (and (increase (value ?c) (rate_value ?c)) (increase (total-cost) 1))\n    )\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (- (value ?c) (rate_value ?c)) 0))\n         :effect (and (decrease (value ?c) (rate_value ?c))(increase (total-cost) 1))\n    )\n\n    (:action increase_rate\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (rate_value ?c) 1) 10))\n         :effect (and (increase (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n    (:action decrement_rate\n         :parameters (?c - counter)\n         :precondition (and (>= (rate_value ?c) 1))\n         :effect (and (decrease (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_18)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 - counter\n  )\n\n  (:init\n    (= (max_int) 36)\n        (= (value c0) 0)\n        (= (value c1) 0)\n        (= (value c2) 0)\n        (= (value c3) 0)\n        (= (value c4) 0)\n        (= (value c5) 0)\n        (= (value c6) 0)\n        (= (value c7) 0)\n        (= (value c8) 0)\n        (= (value c9) 0)\n        (= (value c10) 0)\n        (= (value c11) 0)\n        (= (value c12) 0)\n        (= (value c13) 0)\n        (= (value c14) 0)\n        (= (value c15) 0)\n        (= (value c16) 0)\n        (= (value c17) 0)\n\n        (= (rate_value c0) 0)\n        (= (rate_value c1) 0)\n        (= (rate_value c2) 0)\n        (= (rate_value c3) 0)\n        (= (rate_value c4) 0)\n        (= (rate_value c5) 0)\n        (= (rate_value c6) 0)\n        (= (rate_value c7) 0)\n        (= (rate_value c8) 0)\n        (= (rate_value c9) 0)\n        (= (rate_value c10) 0)\n        (= (rate_value c11) 0)\n        (= (rate_value c12) 0)\n        (= (rate_value c13) 0)\n        (= (rate_value c14) 0)\n        (= (rate_value c15) 0)\n        (= (rate_value c16) 0)\n        (= (rate_value c17) 0)\n  )\n\n  (:goal (and\n    (<= (+ (value c0) 1) (value c1))\n    (<= (+ (value c1) 1) (value c2))\n    (<= (+ (value c2) 1) (value c3))\n    (<= (+ (value c3) 1) (value c4))\n    (<= (+ (value c4) 1) (value c5))\n    (<= (+ (value c5) 1) (value c6))\n    (<= (+ (value c6) 1) (value c7))\n    (<= (+ (value c7) 1) (value c8))\n    (<= (+ (value c8) 1) (value c9))\n    (<= (+ (value c9) 1) (value c10))\n    (<= (+ (value c10) 1) (value c11))\n    (<= (+ (value c11) 1) (value c12))\n    (<= (+ (value c12) 1) (value c13))\n    (<= (+ (value c13) 1) (value c14))\n    (<= (+ (value c14) 1) (value c15))\n    (<= (+ (value c15) 1) (value c16))\n    (<= (+ (value c16) 1) (value c17))\n  ))\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p18.pddl",
      "instance_path": "data/pddl/fo-counters/instances/p18.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (rate_value ?c - counter);;\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n        (total-cost)\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) (rate_value ?c)) (max_int)))\n         :effect (and (increase (value ?c) (rate_value ?c)) (increase (total-cost) 1))\n    )\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (- (value ?c) (rate_value ?c)) 0))\n         :effect (and (decrease (value ?c) (rate_value ?c))(increase (total-cost) 1))\n    )\n\n    (:action increase_rate\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (rate_value ?c) 1) 10))\n         :effect (and (increase (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n    (:action decrement_rate\n         :parameters (?c - counter)\n         :precondition (and (>= (rate_value ?c) 1))\n         :effect (and (decrease (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_19)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 - counter\n  )\n\n  (:init\n    (= (max_int) 38)\n        (= (value c0) 0)\n        (= (value c1) 0)\n        (= (value c2) 0)\n        (= (value c3) 0)\n        (= (value c4) 0)\n        (= (value c5) 0)\n        (= (value c6) 0)\n        (= (value c7) 0)\n        (= (value c8) 0)\n        (= (value c9) 0)\n        (= (value c10) 0)\n        (= (value c11) 0)\n        (= (value c12) 0)\n        (= (value c13) 0)\n        (= (value c14) 0)\n        (= (value c15) 0)\n        (= (value c16) 0)\n        (= (value c17) 0)\n        (= (value c18) 0)\n\n        (= (rate_value c0) 0)\n        (= (rate_value c1) 0)\n        (= (rate_value c2) 0)\n        (= (rate_value c3) 0)\n        (= (rate_value c4) 0)\n        (= (rate_value c5) 0)\n        (= (rate_value c6) 0)\n        (= (rate_value c7) 0)\n        (= (rate_value c8) 0)\n        (= (rate_value c9) 0)\n        (= (rate_value c10) 0)\n        (= (rate_value c11) 0)\n        (= (rate_value c12) 0)\n        (= (rate_value c13) 0)\n        (= (rate_value c14) 0)\n        (= (rate_value c15) 0)\n        (= (rate_value c16) 0)\n        (= (rate_value c17) 0)\n        (= (rate_value c18) 0)\n  )\n\n  (:goal (and\n    (<= (+ (value c0) 1) (value c1))\n    (<= (+ (value c1) 1) (value c2))\n    (<= (+ (value c2) 1) (value c3))\n    (<= (+ (value c3) 1) (value c4))\n    (<= (+ (value c4) 1) (value c5))\n    (<= (+ (value c5) 1) (value c6))\n    (<= (+ (value c6) 1) (value c7))\n    (<= (+ (value c7) 1) (value c8))\n    (<= (+ (value c8) 1) (value c9))\n    (<= (+ (value c9) 1) (value c10))\n    (<= (+ (value c10) 1) (value c11))\n    (<= (+ (value c11) 1) (value c12))\n    (<= (+ (value c12) 1) (value c13))\n    (<= (+ (value c13) 1) (value c14))\n    (<= (+ (value c14) 1) (value c15))\n    (<= (+ (value c15) 1) (value c16))\n    (<= (+ (value c16) 1) (value c17))\n    (<= (+ (value c17) 1) (value c18))\n  ))\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p19.pddl",
      "instance_path": "data/pddl/fo-counters/instances/p19.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (rate_value ?c - counter);;\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n        (total-cost)\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) (rate_value ?c)) (max_int)))\n         :effect (and (increase (value ?c) (rate_value ?c)) (increase (total-cost) 1))\n    )\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (- (value ?c) (rate_value ?c)) 0))\n         :effect (and (decrease (value ?c) (rate_value ?c))(increase (total-cost) 1))\n    )\n\n    (:action increase_rate\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (rate_value ?c) 1) 10))\n         :effect (and (increase (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n    (:action decrement_rate\n         :parameters (?c - counter)\n         :precondition (and (>= (rate_value ?c) 1))\n         :effect (and (decrease (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_20)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 - counter\n  )\n\n  (:init\n    (= (max_int) 40)\n        (= (value c0) 0)\n        (= (value c1) 0)\n        (= (value c2) 0)\n        (= (value c3) 0)\n        (= (value c4) 0)\n        (= (value c5) 0)\n        (= (value c6) 0)\n        (= (value c7) 0)\n        (= (value c8) 0)\n        (= (value c9) 0)\n        (= (value c10) 0)\n        (= (value c11) 0)\n        (= (value c12) 0)\n        (= (value c13) 0)\n        (= (value c14) 0)\n        (= (value c15) 0)\n        (= (value c16) 0)\n        (= (value c17) 0)\n        (= (value c18) 0)\n        (= (value c19) 0)\n\n        (= (rate_value c0) 0)\n        (= (rate_value c1) 0)\n        (= (rate_value c2) 0)\n        (= (rate_value c3) 0)\n        (= (rate_value c4) 0)\n        (= (rate_value c5) 0)\n        (= (rate_value c6) 0)\n        (= (rate_value c7) 0)\n        (= (rate_value c8) 0)\n        (= (rate_value c9) 0)\n        (= (rate_value c10) 0)\n        (= (rate_value c11) 0)\n        (= (rate_value c12) 0)\n        (= (rate_value c13) 0)\n        (= (rate_value c14) 0)\n        (= (rate_value c15) 0)\n        (= (rate_value c16) 0)\n        (= (rate_value c17) 0)\n        (= (rate_value c18) 0)\n        (= (rate_value c19) 0)\n  )\n\n  (:goal (and\n    (<= (+ (value c0) 1) (value c1))\n    (<= (+ (value c1) 1) (value c2))\n    (<= (+ (value c2) 1) (value c3))\n    (<= (+ (value c3) 1) (value c4))\n    (<= (+ (value c4) 1) (value c5))\n    (<= (+ (value c5) 1) (value c6))\n    (<= (+ (value c6) 1) (value c7))\n    (<= (+ (value c7) 1) (value c8))\n    (<= (+ (value c8) 1) (value c9))\n    (<= (+ (value c9) 1) (value c10))\n    (<= (+ (value c10) 1) (value c11))\n    (<= (+ (value c11) 1) (value c12))\n    (<= (+ (value c12) 1) (value c13))\n    (<= (+ (value c13) 1) (value c14))\n    (<= (+ (value c14) 1) (value c15))\n    (<= (+ (value c15) 1) (value c16))\n    (<= (+ (value c16) 1) (value c17))\n    (<= (+ (value c17) 1) (value c18))\n    (<= (+ (value c18) 1) (value c19))\n  ))\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p20.pddl",
      "instance_path": "data/pddl/fo-counters/instances/p20.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain fn-counters)\n    (:types counter)\n\n    (:functions\n        (value ?c - counter);; - int  ;; The value shown in counter ?c\n        (rate_value ?c - counter);;\n        (max_int);; -  int ;; The maximum integer we consider - a static value\n        (total-cost)\n    )\n\n    (:action increment\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (value ?c) (rate_value ?c)) (max_int)))\n         :effect (and (increase (value ?c) (rate_value ?c)) (increase (total-cost) 1))\n    )\n    (:action decrement\n         :parameters (?c - counter)\n         :precondition (and (>= (- (value ?c) (rate_value ?c)) 0))\n         :effect (and (decrease (value ?c) (rate_value ?c))(increase (total-cost) 1))\n    )\n\n    (:action increase_rate\n         :parameters (?c - counter)\n         :precondition (and (<= (+ (rate_value ?c) 1) 10))\n         :effect (and (increase (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n    (:action decrement_rate\n         :parameters (?c - counter)\n         :precondition (and (>= (rate_value ?c) 1))\n         :effect (and (decrease (rate_value ?c) 1)(increase (total-cost) 1))\n    )\n\n\n)\n\n```\n\nTask PDDL:\n```\n;; Enrico Scala (enricos83@gmail.com) and Miquel Ramirez (miquel.ramirez@gmail.com)\n(define (problem instance_21)\n  (:domain fn-counters)\n  (:objects\n    c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c20 - counter\n  )\n\n  (:init\n    (= (max_int) 42)\n        (= (value c0) 0)\n        (= (value c1) 0)\n        (= (value c2) 0)\n        (= (value c3) 0)\n        (= (value c4) 0)\n        (= (value c5) 0)\n        (= (value c6) 0)\n        (= (value c7) 0)\n        (= (value c8) 0)\n        (= (value c9) 0)\n        (= (value c10) 0)\n        (= (value c11) 0)\n        (= (value c12) 0)\n        (= (value c13) 0)\n        (= (value c14) 0)\n        (= (value c15) 0)\n        (= (value c16) 0)\n        (= (value c17) 0)\n        (= (value c18) 0)\n        (= (value c19) 0)\n        (= (value c20) 0)\n\n        (= (rate_value c0) 0)\n        (= (rate_value c1) 0)\n        (= (rate_value c2) 0)\n        (= (rate_value c3) 0)\n        (= (rate_value c4) 0)\n        (= (rate_value c5) 0)\n        (= (rate_value c6) 0)\n        (= (rate_value c7) 0)\n        (= (rate_value c8) 0)\n        (= (rate_value c9) 0)\n        (= (rate_value c10) 0)\n        (= (rate_value c11) 0)\n        (= (rate_value c12) 0)\n        (= (rate_value c13) 0)\n        (= (rate_value c14) 0)\n        (= (rate_value c15) 0)\n        (= (rate_value c16) 0)\n        (= (rate_value c17) 0)\n        (= (rate_value c18) 0)\n        (= (rate_value c19) 0)\n        (= (rate_value c20) 0)\n  )\n\n  (:goal (and\n    (<= (+ (value c0) 1) (value c1))\n    (<= (+ (value c1) 1) (value c2))\n    (<= (+ (value c2) 1) (value c3))\n    (<= (+ (value c3) 1) (value c4))\n    (<= (+ (value c4) 1) (value c5))\n    (<= (+ (value c5) 1) (value c6))\n    (<= (+ (value c6) 1) (value c7))\n    (<= (+ (value c7) 1) (value c8))\n    (<= (+ (value c8) 1) (value c9))\n    (<= (+ (value c9) 1) (value c10))\n    (<= (+ (value c10) 1) (value c11))\n    (<= (+ (value c11) 1) (value c12))\n    (<= (+ (value c12) 1) (value c13))\n    (<= (+ (value c13) 1) (value c14))\n    (<= (+ (value c14) 1) (value c15))\n    (<= (+ (value c15) 1) (value c16))\n    (<= (+ (value c16) 1) (value c17))\n    (<= (+ (value c17) 1) (value c18))\n    (<= (+ (value c18) 1) (value c19))\n    (<= (+ (value c19) 1) (value c20))\n  ))\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    }
  ]
}