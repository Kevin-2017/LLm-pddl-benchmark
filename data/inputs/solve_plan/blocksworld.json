{
  "domain": "blocksworld",
  "domain_file": "data/pddl/blocksworld/domain.pddl",
  "prompts": [
    {
      "instance": "p01.pddl",
      "instance_path": "data/pddl/blocksworld/instances/p01.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (on-table ?x)\n             (arm-empty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pickup\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) \n               (not (arm-empty))))\n\n(:action putdown\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) \n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))\n\n```\n\nTask PDDL:\n```\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects b1 b2 b3 )\n(:init\n(arm-empty)\n(on-table b1)\n(on b2 b3)\n(on b3 b1)\n(clear b2)\n)\n(:goal\n(and\n(on b2 b3)\n(on b3 b1))\n)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p02.pddl",
      "instance_path": "data/pddl/blocksworld/instances/p02.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (on-table ?x)\n             (arm-empty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pickup\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) \n               (not (arm-empty))))\n\n(:action putdown\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) \n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))\n\n```\n\nTask PDDL:\n```\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects b1 b2 b3 )\n(:init\n(arm-empty)\n(on b1 b3)\n(on-table b2)\n(on b3 b2)\n(clear b1)\n)\n(:goal\n(and\n(on b2 b3)\n(on b3 b1))\n)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p03.pddl",
      "instance_path": "data/pddl/blocksworld/instances/p03.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (on-table ?x)\n             (arm-empty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pickup\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) \n               (not (arm-empty))))\n\n(:action putdown\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) \n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))\n\n```\n\nTask PDDL:\n```\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects b1 b2 b3 b4 )\n(:init\n(arm-empty)\n(on b1 b3)\n(on-table b2)\n(on b3 b2)\n(on-table b4)\n(clear b1)\n(clear b4)\n)\n(:goal\n(and\n(on b2 b1)\n(on b3 b4))\n)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p04.pddl",
      "instance_path": "data/pddl/blocksworld/instances/p04.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (on-table ?x)\n             (arm-empty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pickup\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) \n               (not (arm-empty))))\n\n(:action putdown\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) \n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))\n\n```\n\nTask PDDL:\n```\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects b1 b2 b3 b4 )\n(:init\n(arm-empty)\n(on b1 b4)\n(on-table b2)\n(on b3 b1)\n(on b4 b2)\n(clear b3)\n)\n(:goal\n(and\n(on b1 b2)\n(on b2 b3)\n(on b3 b4))\n)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p05.pddl",
      "instance_path": "data/pddl/blocksworld/instances/p05.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (on-table ?x)\n             (arm-empty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pickup\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) \n               (not (arm-empty))))\n\n(:action putdown\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) \n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))\n\n```\n\nTask PDDL:\n```\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects b1 b2 b3 b4 b5 )\n(:init\n(arm-empty)\n(on b1 b2)\n(on b2 b3)\n(on b3 b5)\n(on b4 b1)\n(on-table b5)\n(clear b4)\n)\n(:goal\n(and\n(on b1 b3)\n(on b3 b5))\n)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p06.pddl",
      "instance_path": "data/pddl/blocksworld/instances/p06.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (on-table ?x)\n             (arm-empty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pickup\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) \n               (not (arm-empty))))\n\n(:action putdown\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) \n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))\n\n```\n\nTask PDDL:\n```\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects b1 b2 b3 b4 b5 )\n(:init\n(arm-empty)\n(on-table b1)\n(on b2 b1)\n(on b3 b4)\n(on b4 b2)\n(on b5 b3)\n(clear b5)\n)\n(:goal\n(and\n(on b1 b2)\n(on b3 b5)\n(on b4 b1))\n)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p07.pddl",
      "instance_path": "data/pddl/blocksworld/instances/p07.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (on-table ?x)\n             (arm-empty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pickup\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) \n               (not (arm-empty))))\n\n(:action putdown\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) \n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))\n\n```\n\nTask PDDL:\n```\n(define (problem BW-rand-6)\n(:domain blocksworld-4ops)\n(:objects b1 b2 b3 b4 b5 b6 )\n(:init\n(arm-empty)\n(on-table b1)\n(on b2 b3)\n(on b3 b1)\n(on-table b4)\n(on b5 b2)\n(on-table b6)\n(clear b4)\n(clear b5)\n(clear b6)\n)\n(:goal\n(and\n(on b3 b5)\n(on b4 b3))\n)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p08.pddl",
      "instance_path": "data/pddl/blocksworld/instances/p08.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (on-table ?x)\n             (arm-empty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pickup\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) \n               (not (arm-empty))))\n\n(:action putdown\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) \n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))\n\n```\n\nTask PDDL:\n```\n(define (problem BW-rand-6)\n(:domain blocksworld-4ops)\n(:objects b1 b2 b3 b4 b5 b6 )\n(:init\n(arm-empty)\n(on b1 b3)\n(on-table b2)\n(on b3 b2)\n(on b4 b5)\n(on b5 b1)\n(on b6 b4)\n(clear b6)\n)\n(:goal\n(and\n(on b1 b6)\n(on b3 b5)\n(on b6 b2))\n)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p09.pddl",
      "instance_path": "data/pddl/blocksworld/instances/p09.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (on-table ?x)\n             (arm-empty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pickup\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) \n               (not (arm-empty))))\n\n(:action putdown\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) \n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))\n\n```\n\nTask PDDL:\n```\n(define (problem BW-rand-7)\n(:domain blocksworld-4ops)\n(:objects b1 b2 b3 b4 b5 b6 b7 )\n(:init\n(arm-empty)\n(on-table b1)\n(on-table b2)\n(on b3 b6)\n(on b4 b7)\n(on-table b5)\n(on-table b6)\n(on b7 b3)\n(clear b1)\n(clear b2)\n(clear b4)\n(clear b5)\n)\n(:goal\n(and\n(on b1 b2)\n(on b2 b6)\n(on b3 b7)\n(on b5 b3)\n(on b6 b5)\n(on b7 b4))\n)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p10.pddl",
      "instance_path": "data/pddl/blocksworld/instances/p10.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (on-table ?x)\n             (arm-empty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pickup\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) \n               (not (arm-empty))))\n\n(:action putdown\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) \n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))\n\n```\n\nTask PDDL:\n```\n(define (problem BW-rand-7)\n(:domain blocksworld-4ops)\n(:objects b1 b2 b3 b4 b5 b6 b7 )\n(:init\n(arm-empty)\n(on-table b1)\n(on b2 b5)\n(on-table b3)\n(on b4 b7)\n(on-table b5)\n(on b6 b3)\n(on b7 b1)\n(clear b2)\n(clear b4)\n(clear b6)\n)\n(:goal\n(and\n(on b1 b7)\n(on b2 b5)\n(on b3 b2)\n(on b4 b1)\n(on b5 b6)\n(on b7 b3))\n)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p11.pddl",
      "instance_path": "data/pddl/blocksworld/instances/p11.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (on-table ?x)\n             (arm-empty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pickup\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) \n               (not (arm-empty))))\n\n(:action putdown\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) \n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))\n\n```\n\nTask PDDL:\n```\n(define (problem BW-rand-8)\n(:domain blocksworld-4ops)\n(:objects b1 b2 b3 b4 b5 b6 b7 b8 )\n(:init\n(arm-empty)\n(on-table b1)\n(on b2 b1)\n(on b3 b7)\n(on b4 b2)\n(on b5 b6)\n(on b6 b4)\n(on b7 b5)\n(on b8 b3)\n(clear b8)\n)\n(:goal\n(and\n(on b1 b8)\n(on b2 b3)\n(on b3 b5)\n(on b4 b2)\n(on b8 b7))\n)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p12.pddl",
      "instance_path": "data/pddl/blocksworld/instances/p12.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (on-table ?x)\n             (arm-empty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pickup\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) \n               (not (arm-empty))))\n\n(:action putdown\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) \n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))\n\n```\n\nTask PDDL:\n```\n(define (problem BW-rand-8)\n(:domain blocksworld-4ops)\n(:objects b1 b2 b3 b4 b5 b6 b7 b8 )\n(:init\n(arm-empty)\n(on b1 b6)\n(on-table b2)\n(on-table b3)\n(on-table b4)\n(on-table b5)\n(on b6 b4)\n(on b7 b8)\n(on b8 b1)\n(clear b2)\n(clear b3)\n(clear b5)\n(clear b7)\n)\n(:goal\n(and\n(on b1 b3)\n(on b2 b8)\n(on b3 b2)\n(on b4 b7)\n(on b5 b6)\n(on b6 b4)\n(on b7 b1))\n)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p13.pddl",
      "instance_path": "data/pddl/blocksworld/instances/p13.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (on-table ?x)\n             (arm-empty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pickup\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) \n               (not (arm-empty))))\n\n(:action putdown\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) \n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))\n\n```\n\nTask PDDL:\n```\n(define (problem BW-rand-9)\n(:domain blocksworld-4ops)\n(:objects b1 b2 b3 b4 b5 b6 b7 b8 b9 )\n(:init\n(arm-empty)\n(on b1 b4)\n(on b2 b3)\n(on b3 b1)\n(on-table b4)\n(on b5 b2)\n(on b6 b9)\n(on-table b7)\n(on b8 b6)\n(on b9 b5)\n(clear b7)\n(clear b8)\n)\n(:goal\n(and\n(on b2 b5)\n(on b3 b1)\n(on b4 b8)\n(on b5 b3)\n(on b6 b4)\n(on b8 b7)\n(on b9 b2))\n)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p14.pddl",
      "instance_path": "data/pddl/blocksworld/instances/p14.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (on-table ?x)\n             (arm-empty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pickup\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) \n               (not (arm-empty))))\n\n(:action putdown\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) \n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))\n\n```\n\nTask PDDL:\n```\n(define (problem BW-rand-9)\n(:domain blocksworld-4ops)\n(:objects b1 b2 b3 b4 b5 b6 b7 b8 b9 )\n(:init\n(arm-empty)\n(on b1 b3)\n(on-table b2)\n(on-table b3)\n(on b4 b6)\n(on b5 b1)\n(on-table b6)\n(on b7 b2)\n(on b8 b9)\n(on b9 b7)\n(clear b4)\n(clear b5)\n(clear b8)\n)\n(:goal\n(and\n(on b1 b2)\n(on b2 b7)\n(on b3 b5)\n(on b4 b1)\n(on b5 b6)\n(on b7 b8)\n(on b8 b3)\n(on b9 b4))\n)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p15.pddl",
      "instance_path": "data/pddl/blocksworld/instances/p15.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (on-table ?x)\n             (arm-empty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pickup\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) \n               (not (arm-empty))))\n\n(:action putdown\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) \n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))\n\n```\n\nTask PDDL:\n```\n(define (problem BW-rand-10)\n(:domain blocksworld-4ops)\n(:objects b1 b2 b3 b4 b5 b6 b7 b8 b9 b10 )\n(:init\n(arm-empty)\n(on b1 b5)\n(on b2 b10)\n(on b3 b1)\n(on b4 b8)\n(on-table b5)\n(on b6 b3)\n(on b7 b4)\n(on b8 b6)\n(on b9 b2)\n(on b10 b7)\n(clear b9)\n)\n(:goal\n(and\n(on b2 b1)\n(on b3 b10)\n(on b4 b7)\n(on b6 b8)\n(on b8 b2)\n(on b9 b4)\n(on b10 b9))\n)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p16.pddl",
      "instance_path": "data/pddl/blocksworld/instances/p16.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (on-table ?x)\n             (arm-empty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pickup\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) \n               (not (arm-empty))))\n\n(:action putdown\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) \n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))\n\n```\n\nTask PDDL:\n```\n(define (problem BW-rand-10)\n(:domain blocksworld-4ops)\n(:objects b1 b2 b3 b4 b5 b6 b7 b8 b9 b10 )\n(:init\n(arm-empty)\n(on-table b1)\n(on b2 b3)\n(on b3 b6)\n(on b4 b2)\n(on b5 b4)\n(on b6 b9)\n(on b7 b1)\n(on-table b8)\n(on b9 b10)\n(on b10 b8)\n(clear b5)\n(clear b7)\n)\n(:goal\n(and\n(on b1 b5)\n(on b2 b10)\n(on b5 b3)\n(on b7 b4)\n(on b8 b7)\n(on b9 b2)\n(on b10 b8))\n)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p17.pddl",
      "instance_path": "data/pddl/blocksworld/instances/p17.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (on-table ?x)\n             (arm-empty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pickup\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) \n               (not (arm-empty))))\n\n(:action putdown\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) \n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))\n\n```\n\nTask PDDL:\n```\n(define (problem BW-rand-11)\n(:domain blocksworld-4ops)\n(:objects b1 b2 b3 b4 b5 b6 b7 b8 b9 b10 b11 )\n(:init\n(arm-empty)\n(on b1 b11)\n(on-table b2)\n(on b3 b4)\n(on b4 b10)\n(on b5 b2)\n(on-table b6)\n(on b7 b8)\n(on b8 b1)\n(on b9 b6)\n(on b10 b7)\n(on-table b11)\n(clear b3)\n(clear b5)\n(clear b9)\n)\n(:goal\n(and\n(on b2 b7)\n(on b5 b4)\n(on b6 b10)\n(on b7 b3)\n(on b9 b5)\n(on b10 b9)\n(on b11 b1))\n)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p18.pddl",
      "instance_path": "data/pddl/blocksworld/instances/p18.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (on-table ?x)\n             (arm-empty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pickup\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) \n               (not (arm-empty))))\n\n(:action putdown\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) \n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))\n\n```\n\nTask PDDL:\n```\n(define (problem BW-rand-11)\n(:domain blocksworld-4ops)\n(:objects b1 b2 b3 b4 b5 b6 b7 b8 b9 b10 b11 )\n(:init\n(arm-empty)\n(on b1 b9)\n(on b2 b5)\n(on b3 b6)\n(on-table b4)\n(on b5 b3)\n(on b6 b7)\n(on b7 b1)\n(on-table b8)\n(on b9 b11)\n(on b10 b2)\n(on b11 b8)\n(clear b4)\n(clear b10)\n)\n(:goal\n(and\n(on b1 b4)\n(on b3 b7)\n(on b4 b11)\n(on b6 b5)\n(on b7 b2)\n(on b8 b3)\n(on b10 b9)\n(on b11 b8))\n)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p19.pddl",
      "instance_path": "data/pddl/blocksworld/instances/p19.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (on-table ?x)\n             (arm-empty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pickup\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) \n               (not (arm-empty))))\n\n(:action putdown\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) \n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))\n\n```\n\nTask PDDL:\n```\n(define (problem BW-rand-12)\n(:domain blocksworld-4ops)\n(:objects b1 b2 b3 b4 b5 b6 b7 b8 b9 b10 b11 b12 )\n(:init\n(arm-empty)\n(on-table b1)\n(on b2 b5)\n(on b3 b8)\n(on b4 b12)\n(on b5 b7)\n(on b6 b1)\n(on b7 b10)\n(on-table b8)\n(on-table b9)\n(on b10 b11)\n(on-table b11)\n(on b12 b9)\n(clear b2)\n(clear b3)\n(clear b4)\n(clear b6)\n)\n(:goal\n(and\n(on b5 b10)\n(on b6 b12)\n(on b7 b4)\n(on b8 b3)\n(on b9 b2)\n(on b10 b8)\n(on b11 b7)\n(on b12 b11))\n)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p20.pddl",
      "instance_path": "data/pddl/blocksworld/instances/p20.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (on-table ?x)\n             (arm-empty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pickup\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) \n               (not (arm-empty))))\n\n(:action putdown\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) \n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))\n\n```\n\nTask PDDL:\n```\n(define (problem BW-rand-12)\n(:domain blocksworld-4ops)\n(:objects b1 b2 b3 b4 b5 b6 b7 b8 b9 b10 b11 b12 )\n(:init\n(arm-empty)\n(on b1 b12)\n(on-table b2)\n(on b3 b9)\n(on b4 b10)\n(on b5 b8)\n(on-table b6)\n(on-table b7)\n(on-table b8)\n(on b9 b1)\n(on b10 b3)\n(on b11 b4)\n(on b12 b2)\n(clear b5)\n(clear b6)\n(clear b7)\n(clear b11)\n)\n(:goal\n(and\n(on b1 b6)\n(on b5 b3)\n(on b6 b2)\n(on b8 b9)\n(on b9 b10)\n(on b10 b1)\n(on b11 b12)\n(on b12 b8))\n)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format.Represent all the new line with \n, so the json could be correctly read. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here: \n...\n\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    }
  ]
}