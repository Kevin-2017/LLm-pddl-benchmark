{
  "domain": "expedition",
  "domain_file": "data/pddl/expedition/domain.pddl",
  "prompts": [
    {
      "instance": "p01.pddl",
      "instance_path": "data/pddl/expedition/instances/p01.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain expedition)\n     (:types sled waypoint - object)\n\n     (:predicates\n          (at ?s - sled ?w - waypoint)\n          (is_next ?x - waypoint ?y - waypoint)\n     )\n\n     (:functions\n          (sled_supplies ?s - sled)\n          (sled_capacity ?s - sled)\n          (waypoint_supplies ?w - waypoint)\n     )\n     (:action move_forwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w1 ?w2))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action move_backwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w2 ?w1))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action store_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (sled_supplies ?s) 1))\n     :effect (and (increase (waypoint_supplies ?w) 1)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action retrieve_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (waypoint_supplies ?w) 1)\n                    (> (sled_capacity ?s) (sled_supplies ?s)))\n     :effect (and (decrease (waypoint_supplies ?w) 1)\n               (increase (sled_supplies ?s) 1)))\n)\n\n```\n\nTask PDDL:\n```\n;; Ben Pathak (pathak.ban@gmail.com)\n(define (problem instance_2_sled_1)\n\n\t(:domain expedition)\n\n\t(:objects\n\t\ts0 s1 - sled\n\t\twa0 wa1 wa2 wa3 wa4 wa5 - waypoint\n\t)\n\n  (:init\n\t\t(at s0 wa0)\n\t\t(= (sled_capacity s0) 4)\n\t\t(= (sled_supplies s0) 1)\n\t\t(= (waypoint_supplies wa0) 1000)\n\t\t(= (waypoint_supplies wa1) 0)\n\t\t(= (waypoint_supplies wa2) 0)\n\t\t(= (waypoint_supplies wa3) 0)\n\t\t(= (waypoint_supplies wa4) 0)\n\t\t(= (waypoint_supplies wa5) 0)\n\t\t(is_next wa0 wa1)\n\t\t(is_next wa1 wa2)\n\t\t(is_next wa2 wa3)\n\t\t(is_next wa3 wa4)\n\t\t(is_next wa4 wa5)\n\t\t(at s1 wa0)\n\t\t(= (sled_capacity s1) 4)\n\t\t(= (sled_supplies s1) 1)\n\t)\n\n\t(:goal\n\t\t(and\n\t\t\t(at s0 wa5)\n\t\t\t(at s1 wa5)\n\t\t)\n\t)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p02.pddl",
      "instance_path": "data/pddl/expedition/instances/p02.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain expedition)\n     (:types sled waypoint - object)\n\n     (:predicates\n          (at ?s - sled ?w - waypoint)\n          (is_next ?x - waypoint ?y - waypoint)\n     )\n\n     (:functions\n          (sled_supplies ?s - sled)\n          (sled_capacity ?s - sled)\n          (waypoint_supplies ?w - waypoint)\n     )\n     (:action move_forwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w1 ?w2))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action move_backwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w2 ?w1))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action store_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (sled_supplies ?s) 1))\n     :effect (and (increase (waypoint_supplies ?w) 1)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action retrieve_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (waypoint_supplies ?w) 1)\n                    (> (sled_capacity ?s) (sled_supplies ?s)))\n     :effect (and (decrease (waypoint_supplies ?w) 1)\n               (increase (sled_supplies ?s) 1)))\n)\n\n```\n\nTask PDDL:\n```\n;; Ben Pathak (pathak.ban@gmail.com)\n(define (problem instance_2_sled_2)\n\n\t(:domain expedition)\n\n\t(:objects\n\t\ts0 s1 - sled\n\t\twa0 wa1 wa2 wa3 wa4 wa5 wa6 - waypoint\n\t)\n\n  (:init\n\t\t(at s0 wa0)\n\t\t(= (sled_capacity s0) 4)\n\t\t(= (sled_supplies s0) 1)\n\t\t(= (waypoint_supplies wa0) 1000)\n\t\t(= (waypoint_supplies wa1) 0)\n\t\t(= (waypoint_supplies wa2) 0)\n\t\t(= (waypoint_supplies wa3) 0)\n\t\t(= (waypoint_supplies wa4) 0)\n\t\t(= (waypoint_supplies wa5) 0)\n\t\t(= (waypoint_supplies wa6) 0)\n\t\t(is_next wa0 wa1)\n\t\t(is_next wa1 wa2)\n\t\t(is_next wa2 wa3)\n\t\t(is_next wa3 wa4)\n\t\t(is_next wa4 wa5)\n\t\t(is_next wa5 wa6)\n\t\t(at s1 wa0)\n\t\t(= (sled_capacity s1) 4)\n\t\t(= (sled_supplies s1) 1)\n\t)\n\n\t(:goal\n\t\t(and\n\t\t\t(at s0 wa6)\n\t\t\t(at s1 wa6)\n\t\t)\n\t)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p03.pddl",
      "instance_path": "data/pddl/expedition/instances/p03.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain expedition)\n     (:types sled waypoint - object)\n\n     (:predicates\n          (at ?s - sled ?w - waypoint)\n          (is_next ?x - waypoint ?y - waypoint)\n     )\n\n     (:functions\n          (sled_supplies ?s - sled)\n          (sled_capacity ?s - sled)\n          (waypoint_supplies ?w - waypoint)\n     )\n     (:action move_forwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w1 ?w2))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action move_backwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w2 ?w1))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action store_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (sled_supplies ?s) 1))\n     :effect (and (increase (waypoint_supplies ?w) 1)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action retrieve_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (waypoint_supplies ?w) 1)\n                    (> (sled_capacity ?s) (sled_supplies ?s)))\n     :effect (and (decrease (waypoint_supplies ?w) 1)\n               (increase (sled_supplies ?s) 1)))\n)\n\n```\n\nTask PDDL:\n```\n;; Ben Pathak (pathak.ban@gmail.com)\n(define (problem instance_2_sled_3)\n\n\t(:domain expedition)\n\n\t(:objects\n\t\ts0 s1 - sled\n\t\twa0 wa1 wa2 wa3 wa4 wa5 wa6 wa7 - waypoint\n\t)\n\n  (:init\n\t\t(at s0 wa0)\n\t\t(= (sled_capacity s0) 4)\n\t\t(= (sled_supplies s0) 1)\n\t\t(= (waypoint_supplies wa0) 1000)\n\t\t(= (waypoint_supplies wa1) 0)\n\t\t(= (waypoint_supplies wa2) 0)\n\t\t(= (waypoint_supplies wa3) 0)\n\t\t(= (waypoint_supplies wa4) 0)\n\t\t(= (waypoint_supplies wa5) 0)\n\t\t(= (waypoint_supplies wa6) 0)\n\t\t(= (waypoint_supplies wa7) 0)\n\t\t(is_next wa0 wa1)\n\t\t(is_next wa1 wa2)\n\t\t(is_next wa2 wa3)\n\t\t(is_next wa3 wa4)\n\t\t(is_next wa4 wa5)\n\t\t(is_next wa5 wa6)\n\t\t(is_next wa6 wa7)\n\t\t(at s1 wa0)\n\t\t(= (sled_capacity s1) 4)\n\t\t(= (sled_supplies s1) 1)\n\t)\n\n\t(:goal\n\t\t(and\n\t\t\t(at s0 wa7)\n\t\t\t(at s1 wa7)\n\t\t)\n\t)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p04.pddl",
      "instance_path": "data/pddl/expedition/instances/p04.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain expedition)\n     (:types sled waypoint - object)\n\n     (:predicates\n          (at ?s - sled ?w - waypoint)\n          (is_next ?x - waypoint ?y - waypoint)\n     )\n\n     (:functions\n          (sled_supplies ?s - sled)\n          (sled_capacity ?s - sled)\n          (waypoint_supplies ?w - waypoint)\n     )\n     (:action move_forwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w1 ?w2))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action move_backwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w2 ?w1))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action store_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (sled_supplies ?s) 1))\n     :effect (and (increase (waypoint_supplies ?w) 1)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action retrieve_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (waypoint_supplies ?w) 1)\n                    (> (sled_capacity ?s) (sled_supplies ?s)))\n     :effect (and (decrease (waypoint_supplies ?w) 1)\n               (increase (sled_supplies ?s) 1)))\n)\n\n```\n\nTask PDDL:\n```\n;; Ben Pathak (pathak.ban@gmail.com)\n(define (problem instance_2_sled_4)\n\n\t(:domain expedition)\n\n\t(:objects\n\t\ts0 s1 - sled\n\t\twa0 wa1 wa2 wa3 wa4 wa5 wa6 wa7 wa8 - waypoint\n\t)\n\n  (:init\n\t\t(at s0 wa0)\n\t\t(= (sled_capacity s0) 4)\n\t\t(= (sled_supplies s0) 1)\n\t\t(= (waypoint_supplies wa0) 1000)\n\t\t(= (waypoint_supplies wa1) 0)\n\t\t(= (waypoint_supplies wa2) 0)\n\t\t(= (waypoint_supplies wa3) 0)\n\t\t(= (waypoint_supplies wa4) 0)\n\t\t(= (waypoint_supplies wa5) 0)\n\t\t(= (waypoint_supplies wa6) 0)\n\t\t(= (waypoint_supplies wa7) 0)\n\t\t(= (waypoint_supplies wa8) 0)\n\t\t(is_next wa0 wa1)\n\t\t(is_next wa1 wa2)\n\t\t(is_next wa2 wa3)\n\t\t(is_next wa3 wa4)\n\t\t(is_next wa4 wa5)\n\t\t(is_next wa5 wa6)\n\t\t(is_next wa6 wa7)\n\t\t(is_next wa7 wa8)\n\t\t(at s1 wa0)\n\t\t(= (sled_capacity s1) 4)\n\t\t(= (sled_supplies s1) 1)\n\t)\n\n\t(:goal\n\t\t(and\n\t\t\t(at s0 wa8)\n\t\t\t(at s1 wa8)\n\t\t)\n\t)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p05.pddl",
      "instance_path": "data/pddl/expedition/instances/p05.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain expedition)\n     (:types sled waypoint - object)\n\n     (:predicates\n          (at ?s - sled ?w - waypoint)\n          (is_next ?x - waypoint ?y - waypoint)\n     )\n\n     (:functions\n          (sled_supplies ?s - sled)\n          (sled_capacity ?s - sled)\n          (waypoint_supplies ?w - waypoint)\n     )\n     (:action move_forwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w1 ?w2))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action move_backwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w2 ?w1))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action store_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (sled_supplies ?s) 1))\n     :effect (and (increase (waypoint_supplies ?w) 1)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action retrieve_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (waypoint_supplies ?w) 1)\n                    (> (sled_capacity ?s) (sled_supplies ?s)))\n     :effect (and (decrease (waypoint_supplies ?w) 1)\n               (increase (sled_supplies ?s) 1)))\n)\n\n```\n\nTask PDDL:\n```\n;; Ben Pathak (pathak.ban@gmail.com)\n(define (problem instance_2_sled_5)\n\n\t(:domain expedition)\n\n\t(:objects\n\t\ts0 s1 - sled\n\t\twa0 wa1 wa2 wa3 wa4 wa5 wa6 wa7 wa8 wa9 - waypoint\n\t)\n\n  (:init\n\t\t(at s0 wa0)\n\t\t(= (sled_capacity s0) 4)\n\t\t(= (sled_supplies s0) 1)\n\t\t(= (waypoint_supplies wa0) 1000)\n\t\t(= (waypoint_supplies wa1) 0)\n\t\t(= (waypoint_supplies wa2) 0)\n\t\t(= (waypoint_supplies wa3) 0)\n\t\t(= (waypoint_supplies wa4) 0)\n\t\t(= (waypoint_supplies wa5) 0)\n\t\t(= (waypoint_supplies wa6) 0)\n\t\t(= (waypoint_supplies wa7) 0)\n\t\t(= (waypoint_supplies wa8) 0)\n\t\t(= (waypoint_supplies wa9) 0)\n\t\t(is_next wa0 wa1)\n\t\t(is_next wa1 wa2)\n\t\t(is_next wa2 wa3)\n\t\t(is_next wa3 wa4)\n\t\t(is_next wa4 wa5)\n\t\t(is_next wa5 wa6)\n\t\t(is_next wa6 wa7)\n\t\t(is_next wa7 wa8)\n\t\t(is_next wa8 wa9)\n\t\t(at s1 wa0)\n\t\t(= (sled_capacity s1) 4)\n\t\t(= (sled_supplies s1) 1)\n\t)\n\n\t(:goal\n\t\t(and\n\t\t\t(at s0 wa9)\n\t\t\t(at s1 wa9)\n\t\t)\n\t)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p06.pddl",
      "instance_path": "data/pddl/expedition/instances/p06.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain expedition)\n     (:types sled waypoint - object)\n\n     (:predicates\n          (at ?s - sled ?w - waypoint)\n          (is_next ?x - waypoint ?y - waypoint)\n     )\n\n     (:functions\n          (sled_supplies ?s - sled)\n          (sled_capacity ?s - sled)\n          (waypoint_supplies ?w - waypoint)\n     )\n     (:action move_forwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w1 ?w2))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action move_backwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w2 ?w1))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action store_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (sled_supplies ?s) 1))\n     :effect (and (increase (waypoint_supplies ?w) 1)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action retrieve_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (waypoint_supplies ?w) 1)\n                    (> (sled_capacity ?s) (sled_supplies ?s)))\n     :effect (and (decrease (waypoint_supplies ?w) 1)\n               (increase (sled_supplies ?s) 1)))\n)\n\n```\n\nTask PDDL:\n```\n;; Ben Pathak (pathak.ban@gmail.com)\n(define (problem instance_2_sled_6)\n\n\t(:domain expedition)\n\n\t(:objects\n\t\ts0 s1 - sled\n\t\twa0 wa1 wa2 wa3 wa4 wa5 wa6 wa7 wa8 wa9 wa10 - waypoint\n\t)\n\n  (:init\n\t\t(at s0 wa0)\n\t\t(= (sled_capacity s0) 4)\n\t\t(= (sled_supplies s0) 1)\n\t\t(= (waypoint_supplies wa0) 1000)\n\t\t(= (waypoint_supplies wa1) 0)\n\t\t(= (waypoint_supplies wa2) 0)\n\t\t(= (waypoint_supplies wa3) 0)\n\t\t(= (waypoint_supplies wa4) 0)\n\t\t(= (waypoint_supplies wa5) 0)\n\t\t(= (waypoint_supplies wa6) 0)\n\t\t(= (waypoint_supplies wa7) 0)\n\t\t(= (waypoint_supplies wa8) 0)\n\t\t(= (waypoint_supplies wa9) 0)\n\t\t(= (waypoint_supplies wa10) 0)\n\t\t(is_next wa0 wa1)\n\t\t(is_next wa1 wa2)\n\t\t(is_next wa2 wa3)\n\t\t(is_next wa3 wa4)\n\t\t(is_next wa4 wa5)\n\t\t(is_next wa5 wa6)\n\t\t(is_next wa6 wa7)\n\t\t(is_next wa7 wa8)\n\t\t(is_next wa8 wa9)\n\t\t(is_next wa9 wa10)\n\t\t(at s1 wa0)\n\t\t(= (sled_capacity s1) 4)\n\t\t(= (sled_supplies s1) 1)\n\t)\n\n\t(:goal\n\t\t(and\n\t\t\t(at s0 wa10)\n\t\t\t(at s1 wa10)\n\t\t)\n\t)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p07.pddl",
      "instance_path": "data/pddl/expedition/instances/p07.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain expedition)\n     (:types sled waypoint - object)\n\n     (:predicates\n          (at ?s - sled ?w - waypoint)\n          (is_next ?x - waypoint ?y - waypoint)\n     )\n\n     (:functions\n          (sled_supplies ?s - sled)\n          (sled_capacity ?s - sled)\n          (waypoint_supplies ?w - waypoint)\n     )\n     (:action move_forwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w1 ?w2))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action move_backwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w2 ?w1))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action store_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (sled_supplies ?s) 1))\n     :effect (and (increase (waypoint_supplies ?w) 1)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action retrieve_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (waypoint_supplies ?w) 1)\n                    (> (sled_capacity ?s) (sled_supplies ?s)))\n     :effect (and (decrease (waypoint_supplies ?w) 1)\n               (increase (sled_supplies ?s) 1)))\n)\n\n```\n\nTask PDDL:\n```\n;; Ben Pathak (pathak.ban@gmail.com)\n(define (problem instance_2_sled_1)\n\n\t(:domain expedition)\n\n\t(:objects\n\t\ts0 s1 - sled\n\t\twa0 wa1 wa2 wa3 wa4 wa5 wb0 wb1 wb2 wb3 wb4 wb5 - waypoint\n\t)\n\n  (:init\n\t\t(at s0 wa0)\n\t\t(= (sled_capacity s0) 4)\n\t\t(= (sled_supplies s0) 1)\n\t\t(= (waypoint_supplies wa0) 1000)\n\t\t(= (waypoint_supplies wa1) 0)\n\t\t(= (waypoint_supplies wa2) 0)\n\t\t(= (waypoint_supplies wa3) 0)\n\t\t(= (waypoint_supplies wa4) 0)\n\t\t(= (waypoint_supplies wa5) 0)\n\t\t(is_next wa0 wa1)\n\t\t(is_next wa1 wa2)\n\t\t(is_next wa2 wa3)\n\t\t(is_next wa3 wa4)\n\t\t(is_next wa4 wa5)\n\t\t(at s1 wb0)\n\t\t(= (sled_capacity s1) 4)\n\t\t(= (sled_supplies s1) 1)\n\t\t(= (waypoint_supplies wb0) 1000)\n\t\t(= (waypoint_supplies wb1) 0)\n\t\t(= (waypoint_supplies wb2) 0)\n\t\t(= (waypoint_supplies wb3) 0)\n\t\t(= (waypoint_supplies wb4) 0)\n\t\t(= (waypoint_supplies wb5) 0)\n\t\t(is_next wb0 wb1)\n\t\t(is_next wb1 wb2)\n\t\t(is_next wb2 wb3)\n\t\t(is_next wb3 wb4)\n\t\t(is_next wb4 wb5)\n\t)\n\n\t(:goal\n\t\t(and\n\t\t\t(at s0 wa5)\n\t\t\t(at s1 wb5)\n\t\t)\n\t)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p08.pddl",
      "instance_path": "data/pddl/expedition/instances/p08.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain expedition)\n     (:types sled waypoint - object)\n\n     (:predicates\n          (at ?s - sled ?w - waypoint)\n          (is_next ?x - waypoint ?y - waypoint)\n     )\n\n     (:functions\n          (sled_supplies ?s - sled)\n          (sled_capacity ?s - sled)\n          (waypoint_supplies ?w - waypoint)\n     )\n     (:action move_forwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w1 ?w2))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action move_backwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w2 ?w1))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action store_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (sled_supplies ?s) 1))\n     :effect (and (increase (waypoint_supplies ?w) 1)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action retrieve_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (waypoint_supplies ?w) 1)\n                    (> (sled_capacity ?s) (sled_supplies ?s)))\n     :effect (and (decrease (waypoint_supplies ?w) 1)\n               (increase (sled_supplies ?s) 1)))\n)\n\n```\n\nTask PDDL:\n```\n;; Ben Pathak (pathak.ban@gmail.com)\n(define (problem instance_2_sled_7)\n\n\t(:domain expedition)\n\n\t(:objects\n\t\ts0 s1 - sled\n\t\twa0 wa1 wa2 wa3 wa4 wa5 wa6 wa7 wa8 wa9 wa10 wa11 - waypoint\n\t)\n\n  (:init\n\t\t(at s0 wa0)\n\t\t(= (sled_capacity s0) 4)\n\t\t(= (sled_supplies s0) 1)\n\t\t(= (waypoint_supplies wa0) 1000)\n\t\t(= (waypoint_supplies wa1) 0)\n\t\t(= (waypoint_supplies wa2) 0)\n\t\t(= (waypoint_supplies wa3) 0)\n\t\t(= (waypoint_supplies wa4) 0)\n\t\t(= (waypoint_supplies wa5) 0)\n\t\t(= (waypoint_supplies wa6) 0)\n\t\t(= (waypoint_supplies wa7) 0)\n\t\t(= (waypoint_supplies wa8) 0)\n\t\t(= (waypoint_supplies wa9) 0)\n\t\t(= (waypoint_supplies wa10) 0)\n\t\t(= (waypoint_supplies wa11) 0)\n\t\t(is_next wa0 wa1)\n\t\t(is_next wa1 wa2)\n\t\t(is_next wa2 wa3)\n\t\t(is_next wa3 wa4)\n\t\t(is_next wa4 wa5)\n\t\t(is_next wa5 wa6)\n\t\t(is_next wa6 wa7)\n\t\t(is_next wa7 wa8)\n\t\t(is_next wa8 wa9)\n\t\t(is_next wa9 wa10)\n\t\t(is_next wa10 wa11)\n\t\t(at s1 wa0)\n\t\t(= (sled_capacity s1) 4)\n\t\t(= (sled_supplies s1) 1)\n\t)\n\n\t(:goal\n\t\t(and\n\t\t\t(at s0 wa11)\n\t\t\t(at s1 wa11)\n\t\t)\n\t)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p09.pddl",
      "instance_path": "data/pddl/expedition/instances/p09.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain expedition)\n     (:types sled waypoint - object)\n\n     (:predicates\n          (at ?s - sled ?w - waypoint)\n          (is_next ?x - waypoint ?y - waypoint)\n     )\n\n     (:functions\n          (sled_supplies ?s - sled)\n          (sled_capacity ?s - sled)\n          (waypoint_supplies ?w - waypoint)\n     )\n     (:action move_forwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w1 ?w2))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action move_backwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w2 ?w1))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action store_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (sled_supplies ?s) 1))\n     :effect (and (increase (waypoint_supplies ?w) 1)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action retrieve_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (waypoint_supplies ?w) 1)\n                    (> (sled_capacity ?s) (sled_supplies ?s)))\n     :effect (and (decrease (waypoint_supplies ?w) 1)\n               (increase (sled_supplies ?s) 1)))\n)\n\n```\n\nTask PDDL:\n```\n;; Ben Pathak (pathak.ban@gmail.com)\n(define (problem instance_2_sled_8)\n\n\t(:domain expedition)\n\n\t(:objects\n\t\ts0 s1 - sled\n\t\twa0 wa1 wa2 wa3 wa4 wa5 wa6 wa7 wa8 wa9 wa10 wa11 wa12 - waypoint\n\t)\n\n  (:init\n\t\t(at s0 wa0)\n\t\t(= (sled_capacity s0) 4)\n\t\t(= (sled_supplies s0) 1)\n\t\t(= (waypoint_supplies wa0) 1000)\n\t\t(= (waypoint_supplies wa1) 0)\n\t\t(= (waypoint_supplies wa2) 0)\n\t\t(= (waypoint_supplies wa3) 0)\n\t\t(= (waypoint_supplies wa4) 0)\n\t\t(= (waypoint_supplies wa5) 0)\n\t\t(= (waypoint_supplies wa6) 0)\n\t\t(= (waypoint_supplies wa7) 0)\n\t\t(= (waypoint_supplies wa8) 0)\n\t\t(= (waypoint_supplies wa9) 0)\n\t\t(= (waypoint_supplies wa10) 0)\n\t\t(= (waypoint_supplies wa11) 0)\n\t\t(= (waypoint_supplies wa12) 0)\n\t\t(is_next wa0 wa1)\n\t\t(is_next wa1 wa2)\n\t\t(is_next wa2 wa3)\n\t\t(is_next wa3 wa4)\n\t\t(is_next wa4 wa5)\n\t\t(is_next wa5 wa6)\n\t\t(is_next wa6 wa7)\n\t\t(is_next wa7 wa8)\n\t\t(is_next wa8 wa9)\n\t\t(is_next wa9 wa10)\n\t\t(is_next wa10 wa11)\n\t\t(is_next wa11 wa12)\n\t\t(at s1 wa0)\n\t\t(= (sled_capacity s1) 4)\n\t\t(= (sled_supplies s1) 1)\n\t)\n\n\t(:goal\n\t\t(and\n\t\t\t(at s0 wa12)\n\t\t\t(at s1 wa12)\n\t\t)\n\t)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p10.pddl",
      "instance_path": "data/pddl/expedition/instances/p10.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain expedition)\n     (:types sled waypoint - object)\n\n     (:predicates\n          (at ?s - sled ?w - waypoint)\n          (is_next ?x - waypoint ?y - waypoint)\n     )\n\n     (:functions\n          (sled_supplies ?s - sled)\n          (sled_capacity ?s - sled)\n          (waypoint_supplies ?w - waypoint)\n     )\n     (:action move_forwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w1 ?w2))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action move_backwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w2 ?w1))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action store_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (sled_supplies ?s) 1))\n     :effect (and (increase (waypoint_supplies ?w) 1)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action retrieve_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (waypoint_supplies ?w) 1)\n                    (> (sled_capacity ?s) (sled_supplies ?s)))\n     :effect (and (decrease (waypoint_supplies ?w) 1)\n               (increase (sled_supplies ?s) 1)))\n)\n\n```\n\nTask PDDL:\n```\n;; Ben Pathak (pathak.ban@gmail.com)\n(define (problem instance_2_sled_2)\n\n\t(:domain expedition)\n\n\t(:objects\n\t\ts0 s1 - sled\n\t\twa0 wa1 wa2 wa3 wa4 wa5 wa6 wb0 wb1 wb2 wb3 wb4 wb5 wb6 - waypoint\n\t)\n\n  (:init\n\t\t(at s0 wa0)\n\t\t(= (sled_capacity s0) 4)\n\t\t(= (sled_supplies s0) 1)\n\t\t(= (waypoint_supplies wa0) 1000)\n\t\t(= (waypoint_supplies wa1) 0)\n\t\t(= (waypoint_supplies wa2) 0)\n\t\t(= (waypoint_supplies wa3) 0)\n\t\t(= (waypoint_supplies wa4) 0)\n\t\t(= (waypoint_supplies wa5) 0)\n\t\t(= (waypoint_supplies wa6) 0)\n\t\t(is_next wa0 wa1)\n\t\t(is_next wa1 wa2)\n\t\t(is_next wa2 wa3)\n\t\t(is_next wa3 wa4)\n\t\t(is_next wa4 wa5)\n\t\t(is_next wa5 wa6)\n\t\t(at s1 wb0)\n\t\t(= (sled_capacity s1) 4)\n\t\t(= (sled_supplies s1) 1)\n\t\t(= (waypoint_supplies wb0) 1000)\n\t\t(= (waypoint_supplies wb1) 0)\n\t\t(= (waypoint_supplies wb2) 0)\n\t\t(= (waypoint_supplies wb3) 0)\n\t\t(= (waypoint_supplies wb4) 0)\n\t\t(= (waypoint_supplies wb5) 0)\n\t\t(= (waypoint_supplies wb6) 0)\n\t\t(is_next wb0 wb1)\n\t\t(is_next wb1 wb2)\n\t\t(is_next wb2 wb3)\n\t\t(is_next wb3 wb4)\n\t\t(is_next wb4 wb5)\n\t\t(is_next wb5 wb6)\n\t)\n\n\t(:goal\n\t\t(and\n\t\t\t(at s0 wa6)\n\t\t\t(at s1 wb6)\n\t\t)\n\t)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p11.pddl",
      "instance_path": "data/pddl/expedition/instances/p11.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain expedition)\n     (:types sled waypoint - object)\n\n     (:predicates\n          (at ?s - sled ?w - waypoint)\n          (is_next ?x - waypoint ?y - waypoint)\n     )\n\n     (:functions\n          (sled_supplies ?s - sled)\n          (sled_capacity ?s - sled)\n          (waypoint_supplies ?w - waypoint)\n     )\n     (:action move_forwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w1 ?w2))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action move_backwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w2 ?w1))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action store_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (sled_supplies ?s) 1))\n     :effect (and (increase (waypoint_supplies ?w) 1)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action retrieve_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (waypoint_supplies ?w) 1)\n                    (> (sled_capacity ?s) (sled_supplies ?s)))\n     :effect (and (decrease (waypoint_supplies ?w) 1)\n               (increase (sled_supplies ?s) 1)))\n)\n\n```\n\nTask PDDL:\n```\n;; Ben Pathak (pathak.ban@gmail.com)\n(define (problem instance_2_sled_9)\n\n\t(:domain expedition)\n\n\t(:objects\n\t\ts0 s1 - sled\n\t\twa0 wa1 wa2 wa3 wa4 wa5 wa6 wa7 wa8 wa9 wa10 wa11 wa12 wa13 - waypoint\n\t)\n\n  (:init\n\t\t(at s0 wa0)\n\t\t(= (sled_capacity s0) 4)\n\t\t(= (sled_supplies s0) 1)\n\t\t(= (waypoint_supplies wa0) 1000)\n\t\t(= (waypoint_supplies wa1) 0)\n\t\t(= (waypoint_supplies wa2) 0)\n\t\t(= (waypoint_supplies wa3) 0)\n\t\t(= (waypoint_supplies wa4) 0)\n\t\t(= (waypoint_supplies wa5) 0)\n\t\t(= (waypoint_supplies wa6) 0)\n\t\t(= (waypoint_supplies wa7) 0)\n\t\t(= (waypoint_supplies wa8) 0)\n\t\t(= (waypoint_supplies wa9) 0)\n\t\t(= (waypoint_supplies wa10) 0)\n\t\t(= (waypoint_supplies wa11) 0)\n\t\t(= (waypoint_supplies wa12) 0)\n\t\t(= (waypoint_supplies wa13) 0)\n\t\t(is_next wa0 wa1)\n\t\t(is_next wa1 wa2)\n\t\t(is_next wa2 wa3)\n\t\t(is_next wa3 wa4)\n\t\t(is_next wa4 wa5)\n\t\t(is_next wa5 wa6)\n\t\t(is_next wa6 wa7)\n\t\t(is_next wa7 wa8)\n\t\t(is_next wa8 wa9)\n\t\t(is_next wa9 wa10)\n\t\t(is_next wa10 wa11)\n\t\t(is_next wa11 wa12)\n\t\t(is_next wa12 wa13)\n\t\t(at s1 wa0)\n\t\t(= (sled_capacity s1) 4)\n\t\t(= (sled_supplies s1) 1)\n\t)\n\n\t(:goal\n\t\t(and\n\t\t\t(at s0 wa13)\n\t\t\t(at s1 wa13)\n\t\t)\n\t)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p12.pddl",
      "instance_path": "data/pddl/expedition/instances/p12.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain expedition)\n     (:types sled waypoint - object)\n\n     (:predicates\n          (at ?s - sled ?w - waypoint)\n          (is_next ?x - waypoint ?y - waypoint)\n     )\n\n     (:functions\n          (sled_supplies ?s - sled)\n          (sled_capacity ?s - sled)\n          (waypoint_supplies ?w - waypoint)\n     )\n     (:action move_forwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w1 ?w2))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action move_backwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w2 ?w1))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action store_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (sled_supplies ?s) 1))\n     :effect (and (increase (waypoint_supplies ?w) 1)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action retrieve_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (waypoint_supplies ?w) 1)\n                    (> (sled_capacity ?s) (sled_supplies ?s)))\n     :effect (and (decrease (waypoint_supplies ?w) 1)\n               (increase (sled_supplies ?s) 1)))\n)\n\n```\n\nTask PDDL:\n```\n;; Ben Pathak (pathak.ban@gmail.com)\n(define (problem instance_2_sled_10)\n\n\t(:domain expedition)\n\n\t(:objects\n\t\ts0 s1 - sled\n\t\twa0 wa1 wa2 wa3 wa4 wa5 wa6 wa7 wa8 wa9 wa10 wa11 wa12 wa13 wa14 - waypoint\n\t)\n\n  (:init\n\t\t(at s0 wa0)\n\t\t(= (sled_capacity s0) 4)\n\t\t(= (sled_supplies s0) 1)\n\t\t(at s1 wa0)\n\t\t(= (sled_capacity s1) 4)\n\t\t(= (sled_supplies s1) 1)\n\t\t(= (waypoint_supplies wa0) 1000)\n\t\t(= (waypoint_supplies wa1) 0)\n\t\t(= (waypoint_supplies wa2) 0)\n\t\t(= (waypoint_supplies wa3) 0)\n\t\t(= (waypoint_supplies wa4) 0)\n\t\t(= (waypoint_supplies wa5) 0)\n\t\t(= (waypoint_supplies wa6) 0)\n\t\t(= (waypoint_supplies wa7) 0)\n\t\t(= (waypoint_supplies wa8) 0)\n\t\t(= (waypoint_supplies wa9) 0)\n\t\t(= (waypoint_supplies wa10) 0)\n\t\t(= (waypoint_supplies wa11) 0)\n\t\t(= (waypoint_supplies wa12) 0)\n\t\t(= (waypoint_supplies wa13) 0)\n\t\t(= (waypoint_supplies wa14) 0)\n\t\t(is_next wa0 wa1)\n\t\t(is_next wa1 wa2)\n\t\t(is_next wa2 wa3)\n\t\t(is_next wa3 wa4)\n\t\t(is_next wa4 wa5)\n\t\t(is_next wa5 wa6)\n\t\t(is_next wa6 wa7)\n\t\t(is_next wa7 wa8)\n\t\t(is_next wa8 wa9)\n\t\t(is_next wa9 wa10)\n\t\t(is_next wa10 wa11)\n\t\t(is_next wa11 wa12)\n\t\t(is_next wa12 wa13)\n\t\t(is_next wa13 wa14)\n\t)\n\n\t(:goal\n\t\t(and\n\t\t\t(at s0 wa14)\n\t\t\t(at s1 wa14)\n\t\t)\n\t)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p13.pddl",
      "instance_path": "data/pddl/expedition/instances/p13.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain expedition)\n     (:types sled waypoint - object)\n\n     (:predicates\n          (at ?s - sled ?w - waypoint)\n          (is_next ?x - waypoint ?y - waypoint)\n     )\n\n     (:functions\n          (sled_supplies ?s - sled)\n          (sled_capacity ?s - sled)\n          (waypoint_supplies ?w - waypoint)\n     )\n     (:action move_forwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w1 ?w2))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action move_backwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w2 ?w1))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action store_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (sled_supplies ?s) 1))\n     :effect (and (increase (waypoint_supplies ?w) 1)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action retrieve_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (waypoint_supplies ?w) 1)\n                    (> (sled_capacity ?s) (sled_supplies ?s)))\n     :effect (and (decrease (waypoint_supplies ?w) 1)\n               (increase (sled_supplies ?s) 1)))\n)\n\n```\n\nTask PDDL:\n```\n;; Ben Pathak (pathak.ban@gmail.com)\n(define (problem instance_2_sled_3)\n\n\t(:domain expedition)\n\n\t(:objects\n\t\ts0 s1 - sled\n\t\twa0 wa1 wa2 wa3 wa4 wa5 wa6 wa7 wb0 wb1 wb2 wb3 wb4 wb5 wb6 wb7 - waypoint\n\t)\n\n  (:init\n\t\t(at s0 wa0)\n\t\t(= (sled_capacity s0) 4)\n\t\t(= (sled_supplies s0) 1)\n\t\t(= (waypoint_supplies wa0) 1000)\n\t\t(= (waypoint_supplies wa1) 0)\n\t\t(= (waypoint_supplies wa2) 0)\n\t\t(= (waypoint_supplies wa3) 0)\n\t\t(= (waypoint_supplies wa4) 0)\n\t\t(= (waypoint_supplies wa5) 0)\n\t\t(= (waypoint_supplies wa6) 0)\n\t\t(= (waypoint_supplies wa7) 0)\n\t\t(is_next wa0 wa1)\n\t\t(is_next wa1 wa2)\n\t\t(is_next wa2 wa3)\n\t\t(is_next wa3 wa4)\n\t\t(is_next wa4 wa5)\n\t\t(is_next wa5 wa6)\n\t\t(is_next wa6 wa7)\n\t\t(at s1 wb0)\n\t\t(= (sled_capacity s1) 4)\n\t\t(= (sled_supplies s1) 1)\n\t\t(= (waypoint_supplies wb0) 1000)\n\t\t(= (waypoint_supplies wb1) 0)\n\t\t(= (waypoint_supplies wb2) 0)\n\t\t(= (waypoint_supplies wb3) 0)\n\t\t(= (waypoint_supplies wb4) 0)\n\t\t(= (waypoint_supplies wb5) 0)\n\t\t(= (waypoint_supplies wb6) 0)\n\t\t(= (waypoint_supplies wb7) 0)\n\t\t(is_next wb0 wb1)\n\t\t(is_next wb1 wb2)\n\t\t(is_next wb2 wb3)\n\t\t(is_next wb3 wb4)\n\t\t(is_next wb4 wb5)\n\t\t(is_next wb5 wb6)\n\t\t(is_next wb6 wb7)\n\t)\n\n\t(:goal\n\t\t(and\n\t\t\t(at s0 wa7)\n\t\t\t(at s1 wb7)\n\t\t)\n\t)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p14.pddl",
      "instance_path": "data/pddl/expedition/instances/p14.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain expedition)\n     (:types sled waypoint - object)\n\n     (:predicates\n          (at ?s - sled ?w - waypoint)\n          (is_next ?x - waypoint ?y - waypoint)\n     )\n\n     (:functions\n          (sled_supplies ?s - sled)\n          (sled_capacity ?s - sled)\n          (waypoint_supplies ?w - waypoint)\n     )\n     (:action move_forwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w1 ?w2))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action move_backwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w2 ?w1))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action store_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (sled_supplies ?s) 1))\n     :effect (and (increase (waypoint_supplies ?w) 1)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action retrieve_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (waypoint_supplies ?w) 1)\n                    (> (sled_capacity ?s) (sled_supplies ?s)))\n     :effect (and (decrease (waypoint_supplies ?w) 1)\n               (increase (sled_supplies ?s) 1)))\n)\n\n```\n\nTask PDDL:\n```\n;; Ben Pathak (pathak.ban@gmail.com)\n(define (problem instance_2_sled_4)\n\n\t(:domain expedition)\n\n\t(:objects\n\t\ts0 s1 - sled\n\t\twa0 wa1 wa2 wa3 wa4 wa5 wa6 wa7 wa8 wb0 wb1 wb2 wb3 wb4 wb5 wb6 wb7 wb8 - waypoint\n\t)\n\n  (:init\n\t\t(at s0 wa0)\n\t\t(= (sled_capacity s0) 4)\n\t\t(= (sled_supplies s0) 1)\n\t\t(= (waypoint_supplies wa0) 1000)\n\t\t(= (waypoint_supplies wa1) 0)\n\t\t(= (waypoint_supplies wa2) 0)\n\t\t(= (waypoint_supplies wa3) 0)\n\t\t(= (waypoint_supplies wa4) 0)\n\t\t(= (waypoint_supplies wa5) 0)\n\t\t(= (waypoint_supplies wa6) 0)\n\t\t(= (waypoint_supplies wa7) 0)\n\t\t(= (waypoint_supplies wa8) 0)\n\t\t(is_next wa0 wa1)\n\t\t(is_next wa1 wa2)\n\t\t(is_next wa2 wa3)\n\t\t(is_next wa3 wa4)\n\t\t(is_next wa4 wa5)\n\t\t(is_next wa5 wa6)\n\t\t(is_next wa6 wa7)\n\t\t(is_next wa7 wa8)\n\t\t(at s1 wb0)\n\t\t(= (sled_capacity s1) 4)\n\t\t(= (sled_supplies s1) 1)\n\t\t(= (waypoint_supplies wb0) 1000)\n\t\t(= (waypoint_supplies wb1) 0)\n\t\t(= (waypoint_supplies wb2) 0)\n\t\t(= (waypoint_supplies wb3) 0)\n\t\t(= (waypoint_supplies wb4) 0)\n\t\t(= (waypoint_supplies wb5) 0)\n\t\t(= (waypoint_supplies wb6) 0)\n\t\t(= (waypoint_supplies wb7) 0)\n\t\t(= (waypoint_supplies wb8) 0)\n\t\t(is_next wb0 wb1)\n\t\t(is_next wb1 wb2)\n\t\t(is_next wb2 wb3)\n\t\t(is_next wb3 wb4)\n\t\t(is_next wb4 wb5)\n\t\t(is_next wb5 wb6)\n\t\t(is_next wb6 wb7)\n\t\t(is_next wb7 wb8)\n\t)\n\n\t(:goal\n\t\t(and\n\t\t\t(at s0 wa8)\n\t\t\t(at s1 wb8)\n\t\t)\n\t)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p15.pddl",
      "instance_path": "data/pddl/expedition/instances/p15.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain expedition)\n     (:types sled waypoint - object)\n\n     (:predicates\n          (at ?s - sled ?w - waypoint)\n          (is_next ?x - waypoint ?y - waypoint)\n     )\n\n     (:functions\n          (sled_supplies ?s - sled)\n          (sled_capacity ?s - sled)\n          (waypoint_supplies ?w - waypoint)\n     )\n     (:action move_forwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w1 ?w2))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action move_backwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w2 ?w1))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action store_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (sled_supplies ?s) 1))\n     :effect (and (increase (waypoint_supplies ?w) 1)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action retrieve_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (waypoint_supplies ?w) 1)\n                    (> (sled_capacity ?s) (sled_supplies ?s)))\n     :effect (and (decrease (waypoint_supplies ?w) 1)\n               (increase (sled_supplies ?s) 1)))\n)\n\n```\n\nTask PDDL:\n```\n;; Ben Pathak (pathak.ban@gmail.com)\n(define (problem instance_2_sled_5)\n\n\t(:domain expedition)\n\n\t(:objects\n\t\ts0 s1 - sled\n\t\twa0 wa1 wa2 wa3 wa4 wa5 wa6 wa7 wa8 wa9 wb0 wb1 wb2 wb3 wb4 wb5 wb6 wb7 wb8 wb9 - waypoint\n\t)\n\n  (:init\n\t\t(at s0 wa0)\n\t\t(= (sled_capacity s0) 4)\n\t\t(= (sled_supplies s0) 1)\n\t\t(= (waypoint_supplies wa0) 1000)\n\t\t(= (waypoint_supplies wa1) 0)\n\t\t(= (waypoint_supplies wa2) 0)\n\t\t(= (waypoint_supplies wa3) 0)\n\t\t(= (waypoint_supplies wa4) 0)\n\t\t(= (waypoint_supplies wa5) 0)\n\t\t(= (waypoint_supplies wa6) 0)\n\t\t(= (waypoint_supplies wa7) 0)\n\t\t(= (waypoint_supplies wa8) 0)\n\t\t(= (waypoint_supplies wa9) 0)\n\t\t(is_next wa0 wa1)\n\t\t(is_next wa1 wa2)\n\t\t(is_next wa2 wa3)\n\t\t(is_next wa3 wa4)\n\t\t(is_next wa4 wa5)\n\t\t(is_next wa5 wa6)\n\t\t(is_next wa6 wa7)\n\t\t(is_next wa7 wa8)\n\t\t(is_next wa8 wa9)\n\t\t(at s1 wb0)\n\t\t(= (sled_capacity s1) 4)\n\t\t(= (sled_supplies s1) 1)\n\t\t(= (waypoint_supplies wb0) 1000)\n\t\t(= (waypoint_supplies wb1) 0)\n\t\t(= (waypoint_supplies wb2) 0)\n\t\t(= (waypoint_supplies wb3) 0)\n\t\t(= (waypoint_supplies wb4) 0)\n\t\t(= (waypoint_supplies wb5) 0)\n\t\t(= (waypoint_supplies wb6) 0)\n\t\t(= (waypoint_supplies wb7) 0)\n\t\t(= (waypoint_supplies wb8) 0)\n\t\t(= (waypoint_supplies wb9) 0)\n\t\t(is_next wb0 wb1)\n\t\t(is_next wb1 wb2)\n\t\t(is_next wb2 wb3)\n\t\t(is_next wb3 wb4)\n\t\t(is_next wb4 wb5)\n\t\t(is_next wb5 wb6)\n\t\t(is_next wb6 wb7)\n\t\t(is_next wb7 wb8)\n\t\t(is_next wb8 wb9)\n\t)\n\n\t(:goal\n\t\t(and\n\t\t\t(at s0 wa9)\n\t\t\t(at s1 wb9)\n\t\t)\n\t)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p16.pddl",
      "instance_path": "data/pddl/expedition/instances/p16.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain expedition)\n     (:types sled waypoint - object)\n\n     (:predicates\n          (at ?s - sled ?w - waypoint)\n          (is_next ?x - waypoint ?y - waypoint)\n     )\n\n     (:functions\n          (sled_supplies ?s - sled)\n          (sled_capacity ?s - sled)\n          (waypoint_supplies ?w - waypoint)\n     )\n     (:action move_forwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w1 ?w2))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action move_backwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w2 ?w1))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action store_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (sled_supplies ?s) 1))\n     :effect (and (increase (waypoint_supplies ?w) 1)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action retrieve_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (waypoint_supplies ?w) 1)\n                    (> (sled_capacity ?s) (sled_supplies ?s)))\n     :effect (and (decrease (waypoint_supplies ?w) 1)\n               (increase (sled_supplies ?s) 1)))\n)\n\n```\n\nTask PDDL:\n```\n;; Ben Pathak (pathak.ban@gmail.com)\n(define (problem instance_2_sled_6)\n\n\t(:domain expedition)\n\n\t(:objects\n\t\ts0 s1 - sled\n\t\twa0 wa1 wa2 wa3 wa4 wa5 wa6 wa7 wa8 wa9 wa10 wb0 wb1 wb2 wb3 wb4 wb5 wb6 wb7 wb8 wb9 wb10 - waypoint\n\t)\n\n  (:init\n\t\t(at s0 wa0)\n\t\t(= (sled_capacity s0) 4)\n\t\t(= (sled_supplies s0) 1)\n\t\t(= (waypoint_supplies wa0) 1000)\n\t\t(= (waypoint_supplies wa1) 0)\n\t\t(= (waypoint_supplies wa2) 0)\n\t\t(= (waypoint_supplies wa3) 0)\n\t\t(= (waypoint_supplies wa4) 0)\n\t\t(= (waypoint_supplies wa5) 0)\n\t\t(= (waypoint_supplies wa6) 0)\n\t\t(= (waypoint_supplies wa7) 0)\n\t\t(= (waypoint_supplies wa8) 0)\n\t\t(= (waypoint_supplies wa9) 0)\n\t\t(= (waypoint_supplies wa10) 0)\n\t\t(is_next wa0 wa1)\n\t\t(is_next wa1 wa2)\n\t\t(is_next wa2 wa3)\n\t\t(is_next wa3 wa4)\n\t\t(is_next wa4 wa5)\n\t\t(is_next wa5 wa6)\n\t\t(is_next wa6 wa7)\n\t\t(is_next wa7 wa8)\n\t\t(is_next wa8 wa9)\n\t\t(is_next wa9 wa10)\n\t\t(at s1 wb0)\n\t\t(= (sled_capacity s1) 4)\n\t\t(= (sled_supplies s1) 1)\n\t\t(= (waypoint_supplies wb0) 1000)\n\t\t(= (waypoint_supplies wb1) 0)\n\t\t(= (waypoint_supplies wb2) 0)\n\t\t(= (waypoint_supplies wb3) 0)\n\t\t(= (waypoint_supplies wb4) 0)\n\t\t(= (waypoint_supplies wb5) 0)\n\t\t(= (waypoint_supplies wb6) 0)\n\t\t(= (waypoint_supplies wb7) 0)\n\t\t(= (waypoint_supplies wb8) 0)\n\t\t(= (waypoint_supplies wb9) 0)\n\t\t(= (waypoint_supplies wb10) 0)\n\t\t(is_next wb0 wb1)\n\t\t(is_next wb1 wb2)\n\t\t(is_next wb2 wb3)\n\t\t(is_next wb3 wb4)\n\t\t(is_next wb4 wb5)\n\t\t(is_next wb5 wb6)\n\t\t(is_next wb6 wb7)\n\t\t(is_next wb7 wb8)\n\t\t(is_next wb8 wb9)\n\t\t(is_next wb9 wb10)\n\t)\n\n\t(:goal\n\t\t(and\n\t\t\t(at s0 wa10)\n\t\t\t(at s1 wb10)\n\t\t)\n\t)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p17.pddl",
      "instance_path": "data/pddl/expedition/instances/p17.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain expedition)\n     (:types sled waypoint - object)\n\n     (:predicates\n          (at ?s - sled ?w - waypoint)\n          (is_next ?x - waypoint ?y - waypoint)\n     )\n\n     (:functions\n          (sled_supplies ?s - sled)\n          (sled_capacity ?s - sled)\n          (waypoint_supplies ?w - waypoint)\n     )\n     (:action move_forwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w1 ?w2))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action move_backwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w2 ?w1))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action store_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (sled_supplies ?s) 1))\n     :effect (and (increase (waypoint_supplies ?w) 1)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action retrieve_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (waypoint_supplies ?w) 1)\n                    (> (sled_capacity ?s) (sled_supplies ?s)))\n     :effect (and (decrease (waypoint_supplies ?w) 1)\n               (increase (sled_supplies ?s) 1)))\n)\n\n```\n\nTask PDDL:\n```\n;; Ben Pathak (pathak.ban@gmail.com)\n(define (problem instance_2_sled_7)\n\n\t(:domain expedition)\n\n\t(:objects\n\t\ts0 s1 - sled\n\t\twa0 wa1 wa2 wa3 wa4 wa5 wa6 wa7 wa8 wa9 wa10 wa11 wb0 wb1 wb2 wb3 wb4 wb5 wb6 wb7 wb8 wb9 wb10 wb11 - waypoint\n\t)\n\n  (:init\n\t\t(at s0 wa0)\n\t\t(= (sled_capacity s0) 4)\n\t\t(= (sled_supplies s0) 1)\n\t\t(= (waypoint_supplies wa0) 1000)\n\t\t(= (waypoint_supplies wa1) 0)\n\t\t(= (waypoint_supplies wa2) 0)\n\t\t(= (waypoint_supplies wa3) 0)\n\t\t(= (waypoint_supplies wa4) 0)\n\t\t(= (waypoint_supplies wa5) 0)\n\t\t(= (waypoint_supplies wa6) 0)\n\t\t(= (waypoint_supplies wa7) 0)\n\t\t(= (waypoint_supplies wa8) 0)\n\t\t(= (waypoint_supplies wa9) 0)\n\t\t(= (waypoint_supplies wa10) 0)\n\t\t(= (waypoint_supplies wa11) 0)\n\t\t(is_next wa0 wa1)\n\t\t(is_next wa1 wa2)\n\t\t(is_next wa2 wa3)\n\t\t(is_next wa3 wa4)\n\t\t(is_next wa4 wa5)\n\t\t(is_next wa5 wa6)\n\t\t(is_next wa6 wa7)\n\t\t(is_next wa7 wa8)\n\t\t(is_next wa8 wa9)\n\t\t(is_next wa9 wa10)\n\t\t(is_next wa10 wa11)\n\t\t(at s1 wb0)\n\t\t(= (sled_capacity s1) 4)\n\t\t(= (sled_supplies s1) 1)\n\t\t(= (waypoint_supplies wb0) 1000)\n\t\t(= (waypoint_supplies wb1) 0)\n\t\t(= (waypoint_supplies wb2) 0)\n\t\t(= (waypoint_supplies wb3) 0)\n\t\t(= (waypoint_supplies wb4) 0)\n\t\t(= (waypoint_supplies wb5) 0)\n\t\t(= (waypoint_supplies wb6) 0)\n\t\t(= (waypoint_supplies wb7) 0)\n\t\t(= (waypoint_supplies wb8) 0)\n\t\t(= (waypoint_supplies wb9) 0)\n\t\t(= (waypoint_supplies wb10) 0)\n\t\t(= (waypoint_supplies wb11) 0)\n\t\t(is_next wb0 wb1)\n\t\t(is_next wb1 wb2)\n\t\t(is_next wb2 wb3)\n\t\t(is_next wb3 wb4)\n\t\t(is_next wb4 wb5)\n\t\t(is_next wb5 wb6)\n\t\t(is_next wb6 wb7)\n\t\t(is_next wb7 wb8)\n\t\t(is_next wb8 wb9)\n\t\t(is_next wb9 wb10)\n\t\t(is_next wb10 wb11)\n\t)\n\n\t(:goal\n\t\t(and\n\t\t\t(at s0 wa11)\n\t\t\t(at s1 wb11)\n\t\t)\n\t)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p18.pddl",
      "instance_path": "data/pddl/expedition/instances/p18.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain expedition)\n     (:types sled waypoint - object)\n\n     (:predicates\n          (at ?s - sled ?w - waypoint)\n          (is_next ?x - waypoint ?y - waypoint)\n     )\n\n     (:functions\n          (sled_supplies ?s - sled)\n          (sled_capacity ?s - sled)\n          (waypoint_supplies ?w - waypoint)\n     )\n     (:action move_forwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w1 ?w2))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action move_backwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w2 ?w1))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action store_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (sled_supplies ?s) 1))\n     :effect (and (increase (waypoint_supplies ?w) 1)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action retrieve_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (waypoint_supplies ?w) 1)\n                    (> (sled_capacity ?s) (sled_supplies ?s)))\n     :effect (and (decrease (waypoint_supplies ?w) 1)\n               (increase (sled_supplies ?s) 1)))\n)\n\n```\n\nTask PDDL:\n```\n;; Ben Pathak (pathak.ban@gmail.com)\n(define (problem instance_2_sled_8)\n\n\t(:domain expedition)\n\n\t(:objects\n\t\ts0 s1 - sled\n\t\twa0 wa1 wa2 wa3 wa4 wa5 wa6 wa7 wa8 wa9 wa10 wa11 wa12 wb0 wb1 wb2 wb3 wb4 wb5 wb6 wb7 wb8 wb9 wb10 wb11 wb12 - waypoint\n\t)\n\n  (:init\n\t\t(at s0 wa0)\n\t\t(= (sled_capacity s0) 4)\n\t\t(= (sled_supplies s0) 1)\n\t\t(= (waypoint_supplies wa0) 1000)\n\t\t(= (waypoint_supplies wa1) 0)\n\t\t(= (waypoint_supplies wa2) 0)\n\t\t(= (waypoint_supplies wa3) 0)\n\t\t(= (waypoint_supplies wa4) 0)\n\t\t(= (waypoint_supplies wa5) 0)\n\t\t(= (waypoint_supplies wa6) 0)\n\t\t(= (waypoint_supplies wa7) 0)\n\t\t(= (waypoint_supplies wa8) 0)\n\t\t(= (waypoint_supplies wa9) 0)\n\t\t(= (waypoint_supplies wa10) 0)\n\t\t(= (waypoint_supplies wa11) 0)\n\t\t(= (waypoint_supplies wa12) 0)\n\t\t(is_next wa0 wa1)\n\t\t(is_next wa1 wa2)\n\t\t(is_next wa2 wa3)\n\t\t(is_next wa3 wa4)\n\t\t(is_next wa4 wa5)\n\t\t(is_next wa5 wa6)\n\t\t(is_next wa6 wa7)\n\t\t(is_next wa7 wa8)\n\t\t(is_next wa8 wa9)\n\t\t(is_next wa9 wa10)\n\t\t(is_next wa10 wa11)\n\t\t(is_next wa11 wa12)\n\t\t(at s1 wb0)\n\t\t(= (sled_capacity s1) 4)\n\t\t(= (sled_supplies s1) 1)\n\t\t(= (waypoint_supplies wb0) 1000)\n\t\t(= (waypoint_supplies wb1) 0)\n\t\t(= (waypoint_supplies wb2) 0)\n\t\t(= (waypoint_supplies wb3) 0)\n\t\t(= (waypoint_supplies wb4) 0)\n\t\t(= (waypoint_supplies wb5) 0)\n\t\t(= (waypoint_supplies wb6) 0)\n\t\t(= (waypoint_supplies wb7) 0)\n\t\t(= (waypoint_supplies wb8) 0)\n\t\t(= (waypoint_supplies wb9) 0)\n\t\t(= (waypoint_supplies wb10) 0)\n\t\t(= (waypoint_supplies wb11) 0)\n\t\t(= (waypoint_supplies wb12) 0)\n\t\t(is_next wb0 wb1)\n\t\t(is_next wb1 wb2)\n\t\t(is_next wb2 wb3)\n\t\t(is_next wb3 wb4)\n\t\t(is_next wb4 wb5)\n\t\t(is_next wb5 wb6)\n\t\t(is_next wb6 wb7)\n\t\t(is_next wb7 wb8)\n\t\t(is_next wb8 wb9)\n\t\t(is_next wb9 wb10)\n\t\t(is_next wb10 wb11)\n\t\t(is_next wb11 wb12)\n\t)\n\n\t(:goal\n\t\t(and\n\t\t\t(at s0 wa12)\n\t\t\t(at s1 wb12)\n\t\t)\n\t)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p19.pddl",
      "instance_path": "data/pddl/expedition/instances/p19.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain expedition)\n     (:types sled waypoint - object)\n\n     (:predicates\n          (at ?s - sled ?w - waypoint)\n          (is_next ?x - waypoint ?y - waypoint)\n     )\n\n     (:functions\n          (sled_supplies ?s - sled)\n          (sled_capacity ?s - sled)\n          (waypoint_supplies ?w - waypoint)\n     )\n     (:action move_forwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w1 ?w2))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action move_backwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w2 ?w1))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action store_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (sled_supplies ?s) 1))\n     :effect (and (increase (waypoint_supplies ?w) 1)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action retrieve_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (waypoint_supplies ?w) 1)\n                    (> (sled_capacity ?s) (sled_supplies ?s)))\n     :effect (and (decrease (waypoint_supplies ?w) 1)\n               (increase (sled_supplies ?s) 1)))\n)\n\n```\n\nTask PDDL:\n```\n;; Ben Pathak (pathak.ban@gmail.com)\n(define (problem instance_2_sled_9)\n\n\t(:domain expedition)\n\n\t(:objects\n\t\ts0 s1 - sled\n\t\twa0 wa1 wa2 wa3 wa4 wa5 wa6 wa7 wa8 wa9 wa10 wa11 wa12 wa13 wb0 wb1 wb2 wb3 wb4 wb5 wb6 wb7 wb8 wb9 wb10 wb11 wb12 wb13 - waypoint\n\t)\n\n  (:init\n\t\t(at s0 wa0)\n\t\t(= (sled_capacity s0) 4)\n\t\t(= (sled_supplies s0) 1)\n\t\t(= (waypoint_supplies wa0) 1000)\n\t\t(= (waypoint_supplies wa1) 0)\n\t\t(= (waypoint_supplies wa2) 0)\n\t\t(= (waypoint_supplies wa3) 0)\n\t\t(= (waypoint_supplies wa4) 0)\n\t\t(= (waypoint_supplies wa5) 0)\n\t\t(= (waypoint_supplies wa6) 0)\n\t\t(= (waypoint_supplies wa7) 0)\n\t\t(= (waypoint_supplies wa8) 0)\n\t\t(= (waypoint_supplies wa9) 0)\n\t\t(= (waypoint_supplies wa10) 0)\n\t\t(= (waypoint_supplies wa11) 0)\n\t\t(= (waypoint_supplies wa12) 0)\n\t\t(= (waypoint_supplies wa13) 0)\n\t\t(is_next wa0 wa1)\n\t\t(is_next wa1 wa2)\n\t\t(is_next wa2 wa3)\n\t\t(is_next wa3 wa4)\n\t\t(is_next wa4 wa5)\n\t\t(is_next wa5 wa6)\n\t\t(is_next wa6 wa7)\n\t\t(is_next wa7 wa8)\n\t\t(is_next wa8 wa9)\n\t\t(is_next wa9 wa10)\n\t\t(is_next wa10 wa11)\n\t\t(is_next wa11 wa12)\n\t\t(is_next wa12 wa13)\n\t\t(at s1 wb0)\n\t\t(= (sled_capacity s1) 4)\n\t\t(= (sled_supplies s1) 1)\n\t\t(= (waypoint_supplies wb0) 1000)\n\t\t(= (waypoint_supplies wb1) 0)\n\t\t(= (waypoint_supplies wb2) 0)\n\t\t(= (waypoint_supplies wb3) 0)\n\t\t(= (waypoint_supplies wb4) 0)\n\t\t(= (waypoint_supplies wb5) 0)\n\t\t(= (waypoint_supplies wb6) 0)\n\t\t(= (waypoint_supplies wb7) 0)\n\t\t(= (waypoint_supplies wb8) 0)\n\t\t(= (waypoint_supplies wb9) 0)\n\t\t(= (waypoint_supplies wb10) 0)\n\t\t(= (waypoint_supplies wb11) 0)\n\t\t(= (waypoint_supplies wb12) 0)\n\t\t(= (waypoint_supplies wb13) 0)\n\t\t(is_next wb0 wb1)\n\t\t(is_next wb1 wb2)\n\t\t(is_next wb2 wb3)\n\t\t(is_next wb3 wb4)\n\t\t(is_next wb4 wb5)\n\t\t(is_next wb5 wb6)\n\t\t(is_next wb6 wb7)\n\t\t(is_next wb7 wb8)\n\t\t(is_next wb8 wb9)\n\t\t(is_next wb9 wb10)\n\t\t(is_next wb10 wb11)\n\t\t(is_next wb11 wb12)\n\t\t(is_next wb12 wb13)\n\t)\n\n\t(:goal\n\t\t(and\n\t\t\t(at s0 wa13)\n\t\t\t(at s1 wb13)\n\t\t)\n\t)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    },
    {
      "instance": "p20.pddl",
      "instance_path": "data/pddl/expedition/instances/p20.pddl",
      "prompt": "Solve this planning problem:\n\nDomain PDDL:\n```\n\n(define (domain expedition)\n     (:types sled waypoint - object)\n\n     (:predicates\n          (at ?s - sled ?w - waypoint)\n          (is_next ?x - waypoint ?y - waypoint)\n     )\n\n     (:functions\n          (sled_supplies ?s - sled)\n          (sled_capacity ?s - sled)\n          (waypoint_supplies ?w - waypoint)\n     )\n     (:action move_forwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w1 ?w2))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action move_backwards\n     :parameters (?s - sled ?w1 ?w2 - waypoint)\n     :precondition (and (at ?s ?w1)\n                    (>= (sled_supplies ?s) 1)\n                    (is_next ?w2 ?w1))\n     :effect (and (not (at ?s ?w1))\n               (at ?s ?w2)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action store_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (sled_supplies ?s) 1))\n     :effect (and (increase (waypoint_supplies ?w) 1)\n               (decrease (sled_supplies ?s) 1)))\n\n     (:action retrieve_supplies\n     :parameters (?s - sled ?w - waypoint)\n     :precondition (and (at ?s ?w)\n                    (>= (waypoint_supplies ?w) 1)\n                    (> (sled_capacity ?s) (sled_supplies ?s)))\n     :effect (and (decrease (waypoint_supplies ?w) 1)\n               (increase (sled_supplies ?s) 1)))\n)\n\n```\n\nTask PDDL:\n```\n;; Ben Pathak (pathak.ban@gmail.com)\n(define (problem instance_2_sled_10)\n\n\t(:domain expedition)\n\n\t(:objects\n\t\ts0 s1 - sled\n\t\twa0 wa1 wa2 wa3 wa4 wa5 wa6 wa7 wa8 wa9 wa10 wa11 wa12 wa13 wa14 wb0 wb1 wb2 wb3 wb4 wb5 wb6 wb7 wb8 wb9 wb10 wb11 wb12 wb13 wb14 - waypoint\n\t)\n\n  (:init\n\t\t(at s0 wa0)\n\t\t(= (sled_capacity s0) 4)\n\t\t(= (sled_supplies s0) 1)\n\t\t(= (waypoint_supplies wa0) 1000)\n\t\t(= (waypoint_supplies wa1) 0)\n\t\t(= (waypoint_supplies wa2) 0)\n\t\t(= (waypoint_supplies wa3) 0)\n\t\t(= (waypoint_supplies wa4) 0)\n\t\t(= (waypoint_supplies wa5) 0)\n\t\t(= (waypoint_supplies wa6) 0)\n\t\t(= (waypoint_supplies wa7) 0)\n\t\t(= (waypoint_supplies wa8) 0)\n\t\t(= (waypoint_supplies wa9) 0)\n\t\t(= (waypoint_supplies wa10) 0)\n\t\t(= (waypoint_supplies wa11) 0)\n\t\t(= (waypoint_supplies wa12) 0)\n\t\t(= (waypoint_supplies wa13) 0)\n\t\t(= (waypoint_supplies wa14) 0)\n\t\t(is_next wa0 wa1)\n\t\t(is_next wa1 wa2)\n\t\t(is_next wa2 wa3)\n\t\t(is_next wa3 wa4)\n\t\t(is_next wa4 wa5)\n\t\t(is_next wa5 wa6)\n\t\t(is_next wa6 wa7)\n\t\t(is_next wa7 wa8)\n\t\t(is_next wa8 wa9)\n\t\t(is_next wa9 wa10)\n\t\t(is_next wa10 wa11)\n\t\t(is_next wa11 wa12)\n\t\t(is_next wa12 wa13)\n\t\t(is_next wa13 wa14)\n\t\t(at s1 wb0)\n\t\t(= (sled_capacity s1) 4)\n\t\t(= (sled_supplies s1) 1)\n\t\t(= (waypoint_supplies wb0) 1000)\n\t\t(= (waypoint_supplies wb1) 0)\n\t\t(= (waypoint_supplies wb2) 0)\n\t\t(= (waypoint_supplies wb3) 0)\n\t\t(= (waypoint_supplies wb4) 0)\n\t\t(= (waypoint_supplies wb5) 0)\n\t\t(= (waypoint_supplies wb6) 0)\n\t\t(= (waypoint_supplies wb7) 0)\n\t\t(= (waypoint_supplies wb8) 0)\n\t\t(= (waypoint_supplies wb9) 0)\n\t\t(= (waypoint_supplies wb10) 0)\n\t\t(= (waypoint_supplies wb11) 0)\n\t\t(= (waypoint_supplies wb12) 0)\n\t\t(= (waypoint_supplies wb13) 0)\n\t\t(= (waypoint_supplies wb14) 0)\n\t\t(is_next wb0 wb1)\n\t\t(is_next wb1 wb2)\n\t\t(is_next wb2 wb3)\n\t\t(is_next wb3 wb4)\n\t\t(is_next wb4 wb5)\n\t\t(is_next wb5 wb6)\n\t\t(is_next wb6 wb7)\n\t\t(is_next wb7 wb8)\n\t\t(is_next wb8 wb9)\n\t\t(is_next wb9 wb10)\n\t\t(is_next wb10 wb11)\n\t\t(is_next wb11 wb12)\n\t\t(is_next wb12 wb13)\n\t\t(is_next wb13 wb14)\n\t)\n\n\t(:goal\n\t\t(and\n\t\t\t(at s0 wa14)\n\t\t\t(at s1 wb14)\n\t\t)\n\t)\n)\n```\n\nReason step by step and return the optimal answer enclosed within $$ markers in json format. The json should include 'reason' explaining your solution and 'plan' containing the PDDL format plan. The plan should only include the sequence of actions.\n\nYour response should look exactly like this:\n$$\n{\n    \"reason\": \"your step by step reasoning here\",\n    \"plan\": \"(action1)\\n(action2)\\n(action3)...\"\n}\n$$\n\nMake sure your response follows this format exactly, with $$ markers at the beginning and end."
    }
  ]
}